#############################################################################
# Makefile for building: imi_iso
# Project:               imi_iso
#############################################################################

####### Project specific variables
TARGET = imi_iso
ISOAGLIB_INSTALL_PATH = /usr/local
APP_INC = -I../../../IsoAgLib_Examples 

####### Include a version definition file into the Makefile context - when this file exists
-include versions.mk


PROJ_DEFINES = $(VERSION_DEFINES) -DSYSTEM_PC -DPRJ_USE_AUTOGEN_CONFIG=config_imi_iso.h

####### Definition of compiler binary prefix corresponding to selected target
COMPILER_BINARY_PRE = 


first: all

####### Files
SOURCES_APP = ../../../IsoAgLib_Examples/imi.cpp  

####### Some Standard Rules
CC       = $(COMPILER_BINARY_PRE)gcc
CXX      = $(COMPILER_BINARY_PRE)g++
STRIP	 = $(COMPILER_BINARY_PRE)strip
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -O -Wall -Wextra -g -fno-builtin -Winit-self -Wmissing-include-dirs -Wshadow -Wcast-qual -Wcast-align -Wconversion -Winline -Woverloaded-virtual -Wpointer-arith $(PROJ_DEFINES)
CXXFLAGS = -pipe -O -Wall -Wextra -g -fno-builtin -Winit-self -Wmissing-include-dirs -Wshadow -Wcast-qual -Wcast-align -Wconversion -Winline -Woverloaded-virtual -Wpointer-arith $(PROJ_DEFINES)
LEXFLAGS =
YACCFLAGS= -d
INCPATH  = -I. -I$(ISOAGLIB_INSTALL_PATH)/include $(APP_INC) $(BIOS_INC)
LINK     = $(COMPILER_BINARY_PRE)g++
LFLAGS   = -pthread
LIBS     = $(SUBLIBS)  $(BIOS_LIB)
AR       = ar cqs
RANLIB   =
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJ_DIR_APP  = objects_app

####### Build Rules for Application Part

OBJECTS_APP = $(patsubst %.cpp,$(OBJ_DIR_APP)/%.o,$(notdir $(SOURCES_APP)))
DEPS_APP := $(patsubst %.o,%.d,$(OBJECTS_APP))

# $(OBJ_DIR_APP)/%.d :
# 	$(CXX) -c $(CXXFLAGS) $(INCPATH) -MM -MT $(patsubst %.d,%.o,$@)  $(filter %/$(patsubst $(OBJ_DIR)/%.d,%,$@).cpp,$(SOURCES)) > $@

$(OBJ_DIR_APP)/%.d :
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -MM $(filter %/$(patsubst $(OBJ_DIR_APP)/%.d,%,$@).cpp,$(SOURCES_APP)) 2>/dev/null | \
	perl -p -e 's!^([^:]+:)!$(OBJ_DIR_APP)/$$1!' > $@

include $(DEPS_APP)

####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

$(OBJ_DIR_APP)/%.o : $(filter %/$(patsubst $(OBJ_DIR_APP)/%.d,%,$@).cpp,$(SOURCES_APP)) $(OBJ_DIR_APP)/%.d
	$(CXX) $(CXXFLAGS) $(INCPATH)  -o $@ -c $(filter %/$(patsubst $(OBJ_DIR_APP)/%.o,%,$@).cpp,$(SOURCES_APP))

####### Build rules
deps : $(DEPS_APP)

all: can_server Makefile $(TARGET)
$(TARGET):  $(OBJECTS_APP)
	$(LINK) $(LFLAGS) -o $(TARGET)_static $(OBJECTS_APP) $(LIBS) -static -L$(ISOAGLIB_INSTALL_PATH)/lib -lisoaglib
	$(LINK) $(LFLAGS) -o $(TARGET)_dynamic $(OBJECTS_APP) $(LIBS) -L$(ISOAGLIB_INSTALL_PATH)/lib -lisoaglib
	rm -f $(TARGET)
	ln -s $(TARGET)_dynamic $(TARGET)

yaccclean:
lexclean:
clean:
	-$(DEL_FILE) $(OBJECTS_APP) $(DEPS_APP)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET)_static $(TARGET)_dynamic $(TARGET)


FORCE:

####### Compile


####### Install

uninstall: can_server

