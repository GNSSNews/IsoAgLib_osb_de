####### Some Standard Rules
SUBLIBS  = -lrt
CC       = $(COMPILER_BINARY_PRE)gcc
CXX      = $(COMPILER_BINARY_PRE)g++
STRIP	 = $(COMPILER_BINARY_PRE)strip
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -O -Wall -Wextra -g -fno-builtin -Winit-self -Wmissing-include-dirs -Wshadow -Wcast-qual -Wcast-align -Wconversion -Winline -Woverloaded-virtual -Wpointer-arith $(PROJ_DEFINES)
CXXFLAGS = -pipe -O -Wall -Wextra -g -fno-builtin -Winit-self -Wmissing-include-dirs -Wshadow -Wcast-qual -Wcast-align -Wconversion -Winline -Woverloaded-virtual -Wpointer-arith $(PROJ_DEFINES)
LEXFLAGS =
YACCFLAGS= -d
INCPATH  = -I. -I$(ISOAGLIB_PATH)/xgpl_src $(APP_INC) $(BIOS_INC)
LINK     = $(COMPILER_BINARY_PRE)g++
LFLAGS   =
LIBS     = $(BIOS_LIB) $(SUBLIBS)
AR       = ar cqs
RANLIB   =
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJ_DIR_LIBRARY  = objects_library
OBJ_DIR_APP  = objects_app

####### Build Rules for Library Part

OBJECTS_LIBRARY = $(patsubst %.cpp,$(OBJ_DIR_LIBRARY)/%.o,$(notdir $(SOURCES_LIBRARY)))
DEPS_LIBRARY := $(patsubst %.o,%.d,$(OBJECTS_LIBRARY))

# $(OBJ_DIR_LIBRARY)/%.d :
# 	$(CXX) -c $(CXXFLAGS) $(INCPATH) -MM -MT $(patsubst %.d,%.o,$@)  $(filter %/$(patsubst $(OBJ_DIR)/%.d,%,$@).cpp,$(SOURCES)) > $@

$(OBJ_DIR_LIBRARY)/%.d :
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -MM $(filter %/$(patsubst $(OBJ_DIR_LIBRARY)/%.d,%,$@).cpp,$(SOURCES_LIBRARY)) 2>/dev/null | \
	perl -p -e 's!^([^:]+:)!$(OBJ_DIR_LIBRARY)/$$1!' > $@

include $(DEPS_LIBRARY)

####### Build Rules for Application Part

OBJECTS_APP = $(patsubst %.cpp,$(OBJ_DIR_APP)/%.o,$(notdir $(SOURCES_APP)))
DEPS_APP := $(patsubst %.o,%.d,$(OBJECTS_APP))

# $(OBJ_DIR_APP)/%.d :
# 	$(CXX) -c $(CXXFLAGS) $(INCPATH) -MM -MT $(patsubst %.d,%.o,$@)  $(filter %/$(patsubst $(OBJ_DIR)/%.d,%,$@).cpp,$(SOURCES)) > $@

$(OBJ_DIR_APP)/%.d :
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -MM $(filter %/$(patsubst $(OBJ_DIR_APP)/%.d,%,$@).cpp,$(SOURCES_APP)) 2>/dev/null | \
	perl -p -e 's!^([^:]+:)!$(OBJ_DIR_APP)/$$1!' > $@

include $(DEPS_APP)

####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

$(OBJ_DIR_LIBRARY)/%.o : $(filter %/$(patsubst $(OBJ_DIR_LIBRARY)/%.d,%,$@).cpp,$(SOURCES_LIBRARY)) $(OBJ_DIR_LIBRARY)/%.d
	$(CXX) $(CXXFLAGS) $(INCPATH)  -o $@ -c $(filter %/$(patsubst $(OBJ_DIR_LIBRARY)/%.o,%,$@).cpp,$(SOURCES_LIBRARY))

$(OBJ_DIR_APP)/%.o : $(filter %/$(patsubst $(OBJ_DIR_APP)/%.d,%,$@).cpp,$(SOURCES_APP)) $(OBJ_DIR_APP)/%.d
	$(CXX) $(CXXFLAGS) $(INCPATH)  -o $@ -c $(filter %/$(patsubst $(OBJ_DIR_APP)/%.o,%,$@).cpp,$(SOURCES_APP))

####### Build rules
deps : $(DEPS_LIBRARY) $(DEPS_APP)

static_library:  $(OBJECTS_LIBRARY)
	ar rcs $(OBJ_DIR_LIBRARY)/libisoaglib.a $^

dynamic_library:  $(OBJECTS_LIBRARY)
	$(CXX) -shared -o $(OBJ_DIR_LIBRARY)/libisoaglib.so $^


all: Makefile static_library dynamic_library  $(TARGET)
$(TARGET):  $(OBJECTS_APP) static_library dynamic_library
	$(LINK) $(LFLAGS) -o $(TARGET)_static $(OBJECTS_APP) $(OBJ_DIR_LIBRARY)/libisoaglib.a $(LIBS)
	$(LINK) $(LFLAGS) -o $(TARGET)_dynamic $(OBJECTS_APP) $(OBJ_DIR_LIBRARY)/libisoaglib.so $(LIBS)
	rm -f $(TARGET)
	ln -s $(TARGET)_dynamic $(TARGET)

dist:
	@mkdir -p objects/$(TARGET) && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) objects/$(TARGET)/ && ( cd `dirname objects/$(TARGET)` && $(TAR) vtserver_rte.tar vtserver_rte && $(GZIP) vtserver_rte.tar ) && $(MOVE) `dirname objects/vtserver_rte`/vtserver_rte.tar.gz . && $(DEL_FILE) -r objects/vtserver_rte

yaccclean:
lexclean:
clean:
	-$(DEL_FILE) $(OBJECTS_LIBRARY) $(DEPS_LIBRARY) $(OBJECTS_APP) $(DEPS_APP)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET)_static $(TARGET)_dynamic $(TARGET)


FORCE:

####### Compile


####### Install
install_library: $(INSTALL_FILES_LIBRARY)
	mkdir -p /$(INSTALL_PATH)/lib;
	@for INSTITEM in $(INSTALL_FILES_LIBRARY); do \
		SEARCH=$(ISOAGLIB_PATH)/xgpl_src; \
		REPLACE=$(INSTALL_PATH)/include; \
		#echo "Search $$SEARCH -> replace $$REPLACE"; \
		VAR_TEST=`echo $$INSTITEM | sed -e "s#$$SEARCH#$$REPLACE#g"`; \
		#echo "INSTITEM $$INSTITEM , ISOAGLIB_PATH $(ISOAGLIB_PATH) , INSTALL_PATH $(INSTALL_PATH) -> VAR_TEST $$VAR_TEST"; \
		DEST_PATH=`dirname $$VAR_TEST`; \
		#echo "DestPath $$DEST_PATH" ; \
		mkdir -p $$DEST_PATH; \
		install  -m 0755 $$INSTITEM $$DEST_PATH; \
		done && \
		install  -m 0755 _PROJECT_CONFIG_REPLACE_ $(INSTALL_PATH)/include; \
		install  -m 0755 _PROJECT_VERSION_REPLACE_ $(INSTALL_PATH)/include; \
		install  -m 0755 $(OBJ_DIR_LIBRARY)/libisoaglib.a $(INSTALL_PATH)/lib/; \
		install  -m 0755 $(OBJ_DIR_LIBRARY)/libisoaglib.so "$(INSTALL_PATH)/lib/" ; \
		echo Finished installing binaries to directory \"$(INSTALL_PATH)\"

uninstall:

