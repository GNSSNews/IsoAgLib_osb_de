# -*-mode: makefile; coding: utf-8;-*-
#############################################################################
# Makefile for building: ${INSERT_APPLICATION_NAME}
# Project:               ${INSERT_APPLICATION_NAME}
#############################################################################

####### Project specific variables
ISOAGLIB_PATH = ${INSERT_ISOAGLIB_PATH}
INSTALL_PATH = ${INSERT_ISOAGLIB_INSTALL_PATH}
APP_INC = ${INSERT_APP_INCS}
LIBPATH = ${INSERT_LIBPATH}
EXTERNAL_LIBS = ${INSERT_EXTERNAL_LIBS}

####### Include a version definition file into the Makefile context - when this file exists
-include versions.mk


PROJ_DEFINES = ${INSERT_PROJ_DEFINES}

####### Definition of compiler binary prefix corresponding to selected target
COMPILER_BINARY_PRE = ${INSERT_COMPILER_BINARY_PRE}

first: all

####### Files
SOURCES_LIBRARY = ${INSERT_SOURCES_LIBRARY}

INSTALL_FILES_LIBRARY = ${INSERT_INSTALL_FILES_LIBRARY}

####### Some Standard Rules
SUBLIBS  = ${INSERT_SUBLIBS}
CC       = \$(COMPILER_BINARY_PRE)gcc
CXX      = \$(COMPILER_BINARY_PRE)g++
STRIP    = \$(COMPILER_BINARY_PRE)strip
LEX      = flex
YACC     = yacc

GCC_MAJOR    := \$(shell \$(CXX) -dumpversion 2>&1 | cut -d'.' -f1)
ifneq (\$(GCC_MAJOR),2)
	EXTRA_CFLAGS =  ${INSERT_EXTRA_CFLAGS}
else
endif

CFLAGS   = ${INSERT_CXXFLAGS}
CXXFLAGS = ${INSERT_CXXFLAGS}

LEXFLAGS =
YACCFLAGS= -d
INCPATH  = ${INSERT_INCPATH}
LINK     = \$(COMPILER_BINARY_PRE)g++
LFLAGS   = ${INSERT_LFLAGS}
LIBS     = ${INSERT_LIBS}
AR       = ar
RANLIB   =
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= \$(COPY)
COPY_DIR = \$(COPY) -r
INSTALL_FILE= \$(COPY_FILE)
INSTALL_DIR = \$(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJ_DIR_LIBRARY := objects_library

####### Build Rules for Library Part

OBJECTS_LIBRARY := \$(patsubst %.cpp,\$(OBJ_DIR_LIBRARY)/%.o,\$(notdir \$(SOURCES_LIBRARY)))
DEPS_LIBRARY := \$(patsubst %.o,%.d,\$(OBJECTS_LIBRARY))

PREFIX_LIBRARY = \$(addprefix \$(OBJ_DIR_LIBRARY)/,\$(notdir \$(1)))
SET_SUFFIX = \$(addsuffix \$(1),\$(basename \$(2)))
OBJECTFILE = \$(call PREFIX_LIBRARY,\$(call SET_SUFFIX,.o,\$(1)))
DEPFILE = \$(call PREFIX_LIBRARY,\$(call SET_SUFFIX,.d,\$(1)))

STATIC_ISOAGLIB:=\$(call PREFIX_LIBRARY,libisoaglib.a)
DYNAMIC_ISOAGLIB:=\$(call PREFIX_LIBRARY,libisoaglib.so)

all: static_library dynamic_library

define RULE_BY_LIBSOURCE
# archive:
static_library: \$(STATIC_ISOAGLIB)(\$\$(call OBJECTFILE, \$(1)))

# archive members:
\$(STATIC_ISOAGLIB)(\$\$(call OBJECTFILE, \$(1))): \$\$(call OBJECTFILE, \$(1))

# objects:
\$\$(call OBJECTFILE, \$(1)): \$(1) | \$(OBJ_DIR_LIBRARY)
	\$\$(CXX) \$\$(CXXFLAGS) \$\$(INCPATH) -o \$\$@ -c \$\$<

# dependencies:
\$\$(call DEPFILE,\$(1)): \$(1) | \$(OBJ_DIR_LIBRARY)
	\$\$(CXX) -c \$\$(CXXFLAGS) \$\$(INCPATH) -MM -MT \$\$(call OBJECTFILE,\$\$<) -MF \$\$@ \$\$<

deps: \$\$(call DEPFILE,\$(1))

include \$\$(call DEPFILE,\$(1))

endef

\$(foreach S,\$(SOURCES_LIBRARY),\$(eval \$(call RULE_BY_LIBSOURCE,\$(S))))

# make library directory:
\$(OBJ_DIR_LIBRARY):
	\$(MKDIR) \$@

dynamic_library: \$(DYNAMIC_ISOAGLIB)

# make dynamic library:
\$(DYNAMIC_ISOAGLIB): \$(OBJECTS_LIBRARY)
	\$(CXX) -shared -o \$@ \$^

# clean intermediate files:
clean:
	-\$(DEL_FILE) \$(OBJECTS_LIBRARY) \$(DEPS_LIBRARY)

# clean targets:
distclean: clean
	-\$(DEL_FILE) \$(STATIC_ISOAGLIB) \$(DYNAMIC_ISOAGLIB)
	-\$(DEL_FILE) *~ core *.core

####### Install
install_library: \$(INSTALL_FILES_LIBRARY)
	mkdir -p \$(INSTALL_PATH)/lib;
	@for INSTITEM in \$(INSTALL_FILES_LIBRARY); do \\
${TAB}SEARCH=\$(ISOAGLIB_PATH)/library/xgpl_src; \\
${TAB}REPLACE=\$(INSTALL_PATH)/include; \\
${TAB}#echo "Search \$\$SEARCH -> replace \$\$REPLACE"; \\
${TAB}VAR_TEST=\`echo \$\$INSTITEM | sed -e "s#\$\$SEARCH#\$\$REPLACE#g"\`; \\
${TAB}#echo "INSTITEM \$\$INSTITEM , ISOAGLIB_PATH \$(ISOAGLIB_PATH) , INSTALL_PATH \$(INSTALL_PATH) -> VAR_TEST \$\$VAR_TEST"; \\
${TAB}DEST_PATH=\`dirname \$\$VAR_TEST\`; \\
${TAB}#echo "DestPath \$\$DEST_PATH" ; \\
${TAB}mkdir -p \$\$DEST_PATH; \\
${TAB}install -m 0644 \$\$INSTITEM \$\$DEST_PATH; \\
	done && \\
	install -m 0644 ${INSERT_PROJECT_CONFIG} \$(INSTALL_PATH)/include; \\
	install -m 0644 \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$(INSTALL_PATH)/lib/; \\
	install -m 0755 \$(OBJ_DIR_LIBRARY)/libisoaglib.so \$(INSTALL_PATH)/lib/; \\
	\$(STRIP) \$(INSTALL_PATH)/lib/libisoaglib.a; \\
	\$(STRIP) \$(INSTALL_PATH)/lib/libisoaglib.so; \\
	echo Finished installing includes/libraries to directory \\"\$(INSTALL_PATH)\\"

####### Uninstall
uninstall_library: \$(INSTALL_FILES_LIBRARY)
	@for INSTITEM in \$(INSTALL_FILES_LIBRARY); do \\
${TAB}SEARCH=\$(ISOAGLIB_PATH)/library/xgpl_src; \\
${TAB}REPLACE=\$(INSTALL_PATH)/include; \\
${TAB}#echo "Search \$\$SEARCH -> replace \$\$REPLACE"; \\
${TAB}VAR_TEST=\`echo \$\$INSTITEM | sed -e "s#\$\$SEARCH#\$\$REPLACE#g"\`; \\
${TAB}#echo "INSTITEM \$\$INSTITEM , ISOAGLIB_PATH \$(ISOAGLIB_PATH) , INSTALL_PATH \$(INSTALL_PATH) -> VAR_TEST \$\$VAR_TEST"; \\
${TAB}#echo "VAR_TEST \$\$VAR_TEST" ; \\
${TAB}rm -f \$\$VAR_TEST; \\
	done && \\
	CONFIG=\`basename ${INSERT_PROJECT_CONFIG}\`; \\
	rm \$(INSTALL_PATH)/include/\$\$CONFIG; \\
	rm \$(INSTALL_PATH)/lib/libisoaglib.a; \\
	rm \$(INSTALL_PATH)/lib/libisoaglib.so; \\
	echo Finished uninstalling includes/libraries from directory \\"\$(INSTALL_PATH)\\"

uninstall:

