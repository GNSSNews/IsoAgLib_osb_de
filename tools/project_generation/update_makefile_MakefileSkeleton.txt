####### Some Standard Rules
SUBLIBS  = -lrt
CC       = \$(COMPILER_BINARY_PRE)gcc
CXX      = \$(COMPILER_BINARY_PRE)g++
STRIP    = \$(COMPILER_BINARY_PRE)strip
LEX      = flex
YACC     = yacc

GCC_MAJOR    := \$(shell \$(CXX) -dumpversion 2>&1 | cut -d'.' -f1)
ifneq (\$(GCC_MAJOR),2)
	EXTRA_CFLAGS =  -Wextra -Winit-self -Wmissing-include-dirs
else
endif

CFLAGS   = -pipe -O -Wall -g \$(EXTRA_CFLAGS) -fno-builtin -fno-exceptions -Wshadow -Wcast-qual -Wcast-align -Woverloaded-virtual -Wpointer-arith \$(PROJ_DEFINES)
CXXFLAGS = -pipe -O -Wall -g \$(EXTRA_CFLAGS) -fno-builtin -fno-exceptions -Wshadow -Wcast-qual -Wcast-align -Woverloaded-virtual -Wpointer-arith \$(PROJ_DEFINES)

LEXFLAGS =
YACCFLAGS= -d
INCPATH  = -I. -I\$(ISOAGLIB_PATH)/library -I\$(ISOAGLIB_PATH)/library/xgpl_src \$(APP_INC) \$(BIOS_INC)
LINK     = \$(COMPILER_BINARY_PRE)g++
LFLAGS   = \$(LIBPATH)
LIBS     = \$(BIOS_LIB) \$(SUBLIBS) \$(EXTERNAL_LIBS)
AR       = ar cqs
RANLIB   =
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= \$(COPY)
COPY_DIR = \$(COPY) -r
INSTALL_FILE= \$(COPY_FILE)
INSTALL_DIR = \$(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p
UTESTFLAGS= -DUNITTEST

####### Output directory

OBJ_DIR_LIBRARY  = objects_library
OBJ_DIR_APP  = objects_app

####### Build Rules for Library Part

OBJECTS_LIBRARY = \$(patsubst %.cpp,\$(OBJ_DIR_LIBRARY)/%.o,\$(notdir \$(SOURCES_LIBRARY)))
DEPS_LIBRARY := \$(patsubst %.o,%.d,\$(OBJECTS_LIBRARY))

# \$(OBJ_DIR_LIBRARY)/%.d :
# 	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) -MM -MT \$(patsubst %.d,%.o,\$@)  \$(filter %/\$(patsubst \$(OBJ_DIR)/%.d,%,\$@).cpp,\$(SOURCES)) > \$@

\$(OBJ_DIR_LIBRARY)/%.d :
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) -MM \$(filter %/\$(patsubst \$(OBJ_DIR_LIBRARY)/%.d,%,\$@).cpp,\$(SOURCES_LIBRARY)) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_LIBRARY)/\$\$1!' > \$@

include \$(DEPS_LIBRARY)

####### Build Rules for Application Part

OBJECTS_APP = \$(patsubst %.cpp,\$(OBJ_DIR_APP)/%.o,\$(notdir \$(SOURCES_APP)))
DEPS_APP := \$(patsubst %.o,%.d,\$(OBJECTS_APP))

# \$(OBJ_DIR_APP)/%.d :
# 	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) -MM -MT \$(patsubst %.d,%.o,\$@)  \$(filter %/\$(patsubst \$(OBJ_DIR)/%.d,%,\$@).cpp,\$(SOURCES)) > \$@

\$(OBJ_DIR_APP)/%.d :
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) -MM \$(filter %/\$(patsubst \$(OBJ_DIR_APP)/%.d,%,\$@).cpp,\$(SOURCES_APP)) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_APP)/\$\$1!' > \$@

include \$(DEPS_APP)

####### Test-Files

SOURCES_UTEST = \$(patsubst %.h,%.cpp,\$(HEADERS_UTEST))
SOURCES_UTEST_MOCKS = \$(patsubst %.h,%.cpp,\$(HEADERS_UTEST_MOCKS))
SOURCES_UTEST_MOD_SUT = \$(patsubst %.h,%.cpp,\$(HEADERS_UTEST_MOD_SUT))

# Special Rules for Unit-Tests
OBJ_DIR_UTEST  = objects_utest
OBJECTS_UTEST = \$(patsubst %.cpp,\$(OBJ_DIR_UTEST)/%.o,\$(notdir \$(SOURCES_UTEST))) \$(patsubst %.cpp,\$(OBJ_DIR_UTEST)/%.o,\$(notdir \$(SOURCES_UTEST_MOCKS))) \$(patsubst %.cpp,\$(OBJ_DIR_UTEST)/%-modsut.o,\$(notdir \$(SOURCES_UTEST_MOD_SUT)))
DEPS_UTEST := \$(patsubst %.o,%.d,\$(OBJECTS_UTEST))

# Set additional searchpath for dependencies
VPATH = \$(dir \$(SOURCES_UTEST)) \$(dir \$(SOURCES_UTEST_MOCKS)) \$(dir \$(SOURCES_UTEST_MOD_SUT))

\$(OBJ_DIR_UTEST)/%-test.cpp : %-test.h
	cxxtestgen.pl --part -o \$@ \$<

\$(OBJ_DIR_UTEST)/%-modsut.d :
	\$(CXX) -c \$(CXXFLAGS) \$(UTESTFLAGS) \$(INCPATH) -MM \$(filter %/\$(notdir \$(patsubst %-modsut.d,%.cpp,\$@)),\$(SOURCES_UTEST_MOD_SUT)) 2>/dev/null | \\
	perl -p -e 's!(.*)\\.o:!\$(OBJ_DIR_UTEST)/\$\$1-modsut.o:!' > \$@

\$(OBJ_DIR_UTEST)/%-test.d :
	cxxtestgen.pl --part -o \$(patsubst %.d,%.cpp,\$@) \$(filter %/\$(notdir \$(patsubst %.d,%.h,\$@)),\$(HEADERS_UTEST))
	\$(CXX) -c \$(CXXFLAGS) \$(UTESTFLAGS) \$(INCPATH) -MM \$(patsubst %.d,%.cpp,\$@) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_UTEST)/\$\$1!' > \$@

\$(OBJ_DIR_UTEST)/%-mock.d :
	\$(CXX) -c \$(CXXFLAGS) \$(UTESTFLAGS) \$(INCPATH) -MM \$(filter %/\$(notdir \$(patsubst %.d,%.cpp,\$@)),\$(SOURCES_UTEST_MOCKS)) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_UTEST)/\$\$1!' > \$@

\$(OBJ_DIR_UTEST)/%-modsut.o : \$(OBJ_DIR_UTEST)/%-modsut.d
	\$(CXX) \$(CXXFLAGS) \$(UTESTFLAGS) \$(INCPATH)  -o \$@ -c \$(filter %/\$(notdir \$(patsubst %-modsut.o,%.cpp,\$@)),\$(SOURCES_UTEST_MOD_SUT))

\$(OBJ_DIR_UTEST)/%-test.o : \$(filter %/\$(patsubst \$(OBJ_DIR_UTEST)/%.o,%,\$@).cpp,\$(SOURCES_UTEST)) \$(OBJ_DIR_UTEST)/%-test.d
	\$(CXX) \$(CXXFLAGS) \$(UTESTFLAGS) \$(INCPATH)  -o \$@ -c \$(OBJ_DIR_UTEST)/\$(notdir \$(filter %/\$(patsubst \$(OBJ_DIR_UTEST)/%.o,%,\$@).cpp,\$(SOURCES_UTEST)))

\$(OBJ_DIR_UTEST)/%-mock.o : \$(filter %/\$(notdir \$(patsubst %.o,%.cpp,\$@)),\$(SOURCES_UTEST_MOCKS)) \$(OBJ_DIR_UTEST)/%-mock.d
	\$(CXX) \$(CXXFLAGS) \$(UTESTFLAGS) \$(INCPATH)  -o \$@ -c \$(filter %/\$(notdir \$(patsubst %.o,%.cpp,\$@)),\$(SOURCES_UTEST_MOCKS))

include \$(DEPS_UTEST)

####### TestRunner-Files

# Special Rules for Unit-Tests (test runner)
OBJ_DIR_TESTRUNNER = objects_testrunner
OBJECTS_TESTRUNNER = \$(patsubst %.cpp,\$(OBJ_DIR_TESTRUNNER)/%.o,\$(notdir \$(TESTRUNNER_SOURCES)))
DEPS_TESTRUNNER := \$(patsubst %.o,%.d,\$(OBJECTS_TESTRUNNER))

\$(OBJ_DIR_TESTRUNNER)/%.d :
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) -MM \$(filter %/\$(patsubst \$(OBJ_DIR_TESTRUNNER)/%.d,%,\$@).cpp,\$(TESTRUNNER_SOURCES)) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_TESTRUNNER)/\$\$1!' > \$@

\$(OBJ_DIR_TESTRUNNER)/%.o : \$(filter %/\$(patsubst \$(OBJ_DIR_TESTRUNNER)/%.d,%,\$@).cpp,\$(TESTRUNNER_SOURCES)) \$(OBJ_DIR_TESTRUNNER)/%.d
	\$(CXX) \$(CXXFLAGS) \$(INCPATH)  -o \$@ -c \$(filter %/\$(patsubst \$(OBJ_DIR_TESTRUNNER)/%.o,%,\$@).cpp,\$(TESTRUNNER_SOURCES))

include \$(DEPS_TESTRUNNER)

testrunner: \$(OBJECTS_TESTRUNNER) \$(OBJECTS_UTEST)
ifeq (\$(TESTRUNNER_SOURCES),)
	@echo "No testrunner build because of no testrunner.cpp is set!"
else
	\$(LINK) \$(LFLAGS) -o testrunner \$(OBJECTS_TESTRUNNER) \$(OBJECTS_UTEST) \$(LIBS) \$(WX_LIBS)
endif

####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

\$(OBJ_DIR_LIBRARY)/%.o : \$(filter %/\$(patsubst \$(OBJ_DIR_LIBRARY)/%.d,%,\$@).cpp,\$(SOURCES_LIBRARY)) \$(OBJ_DIR_LIBRARY)/%.d
	\$(CXX) \$(CXXFLAGS) \$(INCPATH)  -o \$@ -c \$(filter %/\$(patsubst \$(OBJ_DIR_LIBRARY)/%.o,%,\$@).cpp,\$(SOURCES_LIBRARY))

\$(OBJ_DIR_APP)/%.o : \$(filter %/\$(patsubst \$(OBJ_DIR_APP)/%.d,%,\$@).cpp,\$(SOURCES_APP)) \$(OBJ_DIR_APP)/%.d
	\$(CXX) \$(CXXFLAGS) \$(INCPATH)  -o \$@ -c \$(filter %/\$(patsubst \$(OBJ_DIR_APP)/%.o,%,\$@).cpp,\$(SOURCES_APP))

####### Build rules
deps : \$(DEPS_LIBRARY) \$(DEPS_APP) \$(DEPS_UTEST) \$(DEPS_TESTRUNNER)

static_library:  \$(OBJECTS_LIBRARY)
	-\$(DEL_FILE) \$(OBJ_DIR_LIBRARY)/libisoaglib.a
	ar rcs \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$^

dynamic_library:  \$(OBJECTS_LIBRARY)
	-\$(DEL_FILE) \$(OBJ_DIR_LIBRARY)/libisoaglib.so
	\$(CXX) -shared -o \$(OBJ_DIR_LIBRARY)/libisoaglib.so \$^


all: Makefile static_library dynamic_library  \$(TARGET) testrunner
\$(TARGET):  \$(OBJECTS_APP) static_library dynamic_library
	\$(LINK) \$(LFLAGS) -o \$(TARGET)_static \$(OBJECTS_APP) \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$(LIBS)
	\$(LINK) \$(LFLAGS) -o \$(TARGET)_dynamic \$(OBJECTS_APP) \$(OBJ_DIR_LIBRARY)/libisoaglib.so \$(LIBS)
	-\$(DEL_FILE) \$(TARGET)
	ln -s \$(TARGET)_static \$(TARGET)

yaccclean:
lexclean:
clean:
	-\$(DEL_FILE) \$(OBJECTS_LIBRARY) \$(DEPS_LIBRARY) \$(OBJECTS_APP) \$(DEPS_APP) \$(OBJECTS_UTEST) \$(OBJECTS_TESTRUNNER)
	-\$(DEL_FILE) \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$(OBJ_DIR_LIBRARY)/libisoaglib.so
	-\$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-\$(DEL_FILE) \$(TARGET)_static \$(TARGET)_dynamic \$(TARGET) testrunner
	-\$(DEL_FILE) \$(OBJ_DIR_UTEST)/* \$(OBJ_DIR_TESTRUNNER)/*


FORCE:

####### Compile


####### Install
install_library: \$(INSTALL_FILES_LIBRARY)
	mkdir -p /\$(INSTALL_PATH)/lib;
	@for INSTITEM in \$(INSTALL_FILES_LIBRARY); do \\
${TAB}SEARCH=\$(ISOAGLIB_PATH)/library/xgpl_src; \\
${TAB}REPLACE=\$(INSTALL_PATH)/include; \\
${TAB}#echo "Search \$\$SEARCH -> replace \$\$REPLACE"; \\
${TAB}VAR_TEST=\`echo \$\$INSTITEM | sed -e "s#\$\$SEARCH#\$\$REPLACE#g"\`; \\
${TAB}#echo "INSTITEM \$\$INSTITEM , ISOAGLIB_PATH \$(ISOAGLIB_PATH) , INSTALL_PATH \$(INSTALL_PATH) -> VAR_TEST \$\$VAR_TEST"; \\
${TAB}DEST_PATH=\`dirname \$\$VAR_TEST\`; \\
${TAB}#echo "DestPath \$\$DEST_PATH" ; \\
${TAB}mkdir -p \$\$DEST_PATH; \\
${TAB}install -m 0755 \$\$INSTITEM \$\$DEST_PATH; \\
	done && \\
	install -m 0755 _PROJECT_CONFIG_REPLACE_ \$(INSTALL_PATH)/include; \\
	install -m 0755 _PROJECT_VERSION_REPLACE_ \$(INSTALL_PATH)/include; \\
	install -m 0755 \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$(INSTALL_PATH)/lib/; \\
	install -m 0755 \$(OBJ_DIR_LIBRARY)/libisoaglib.so \$(INSTALL_PATH)/lib/; \\
	\$(STRIP) \$(INSTALL_PATH)/lib/libisoaglib.a; \\
	\$(STRIP) \$(INSTALL_PATH)/lib/libisoaglib.so; \\
	echo Finished installing includes/libraries to directory \\"\$(INSTALL_PATH)\\"

####### Uninstall
uninstall_library: \$(INSTALL_FILES_LIBRARY)
	@for INSTITEM in \$(INSTALL_FILES_LIBRARY); do \\
${TAB}SEARCH=\$(ISOAGLIB_PATH)/library/xgpl_src; \\
${TAB}REPLACE=\$(INSTALL_PATH)/include; \\
${TAB}#echo "Search \$\$SEARCH -> replace \$\$REPLACE"; \\
${TAB}VAR_TEST=\`echo \$\$INSTITEM | sed -e "s#\$\$SEARCH#\$\$REPLACE#g"\`; \\
${TAB}#echo "INSTITEM \$\$INSTITEM , ISOAGLIB_PATH \$(ISOAGLIB_PATH) , INSTALL_PATH \$(INSTALL_PATH) -> VAR_TEST \$\$VAR_TEST"; \\
${TAB}#echo "VAR_TEST \$\$VAR_TEST" ; \\
${TAB}rm -f \$\$VAR_TEST; \\
	done && \\
	CONFIG=\`basename _PROJECT_CONFIG_REPLACE_\`; \\
	VERSION=\`basename _PROJECT_VERSION_REPLACE_\`; \\
	rm \$(INSTALL_PATH)/include/\$\$CONFIG; \\
	rm \$(INSTALL_PATH)/include/\$\$VERSION; \\
	rm \$(INSTALL_PATH)/lib/libisoaglib.a; \\
	rm \$(INSTALL_PATH)/lib/libisoaglib.so; \\
	echo Finished uninstalling includes/libraries from directory \\"\$(INSTALL_PATH)\\"

uninstall:

