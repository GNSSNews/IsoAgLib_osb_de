####### Some Standard Rules
SUBLIBS  = ${INSERT_SUBLIBS}
CC       = \$(COMPILER_BINARY_PRE)gcc
CXX      = \$(COMPILER_BINARY_PRE)g++
STRIP    = \$(COMPILER_BINARY_PRE)strip
LEX      = flex
YACC     = yacc

GCC_MAJOR    := \$(shell \$(CXX) -dumpversion 2>&1 | cut -d'.' -f1)
ifneq (\$(GCC_MAJOR),2)
	EXTRA_CFLAGS =  ${INSERT_EXTRA_CFLAGS}
else
endif

CFLAGS   = ${INSERT_CXXFLAGS}
CXXFLAGS = ${INSERT_CXXFLAGS}

LEXFLAGS =
YACCFLAGS= -d
INCPATH  = ${INSERT_INCPATH}
LINK     = \$(COMPILER_BINARY_PRE)g++
LFLAGS   = ${INSERT_LFLAGS}
LIBS     = ${INSERT_LIBS}
AR       = ar cqs
RANLIB   =
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= \$(COPY)
COPY_DIR = \$(COPY) -r
INSTALL_FILE= \$(COPY_FILE)
INSTALL_DIR = \$(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJ_DIR_LIBRARY  = objects_library
OBJ_DIR_APP  = objects_app

####### Build Rules for Library Part

OBJECTS_LIBRARY = \$(patsubst %.cpp,\$(OBJ_DIR_LIBRARY)/%.o,\$(notdir \$(SOURCES_LIBRARY)))
DEPS_LIBRARY := \$(patsubst %.o,%.d,\$(OBJECTS_LIBRARY))

# \$(OBJ_DIR_LIBRARY)/%.d :
# 	\$(CXX) -c ${INSERT_CPP_PARAMETERS} -MM -MT \$(patsubst %.d,%.o,\$@)  \$(filter %/\$(patsubst \$(OBJ_DIR)/%.d,%,\$@).cpp,\$(SOURCES)) > \$@

\$(OBJ_DIR_LIBRARY)/%.d :
	\$(CXX) -c ${INSERT_CPP_PARAMETERS} -MM \$(filter %/\$(patsubst \$(OBJ_DIR_LIBRARY)/%.d,%,\$@).cpp,\$(SOURCES_LIBRARY)) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_LIBRARY)/\$\$1!' > \$@

include \$(DEPS_LIBRARY)

####### Build Rules for Application Part

OBJECTS_APP = \$(patsubst %.cpp,\$(OBJ_DIR_APP)/%.o,\$(notdir \$(SOURCES_APP)))
DEPS_APP := \$(patsubst %.o,%.d,\$(OBJECTS_APP))

# \$(OBJ_DIR_APP)/%.d :
# 	\$(CXX) -c ${INSERT_CPP_PARAMETERS} -MM -MT \$(patsubst %.d,%.o,\$@)  \$(filter %/\$(patsubst \$(OBJ_DIR)/%.d,%,\$@).cpp,\$(SOURCES)) > \$@

\$(OBJ_DIR_APP)/%.d :
	\$(CXX) -c ${INSERT_CPP_PARAMETERS} -MM \$(filter %/\$(patsubst \$(OBJ_DIR_APP)/%.d,%,\$@).cpp,\$(SOURCES_APP)) 2>/dev/null | \\
	perl -p -e 's!^([^:]+:)!\$(OBJ_DIR_APP)/\$\$1!' > \$@

include \$(DEPS_APP)

####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

\$(OBJ_DIR_LIBRARY)/%.o : \$(filter %/\$(patsubst \$(OBJ_DIR_LIBRARY)/%.d,%,\$@).cpp,\$(SOURCES_LIBRARY)) \$(OBJ_DIR_LIBRARY)/%.d
	\$(CXX) ${INSERT_CPP_PARAMETERS}  -o \$@ -c \$(filter %/\$(patsubst \$(OBJ_DIR_LIBRARY)/%.o,%,\$@).cpp,\$(SOURCES_LIBRARY))

\$(OBJ_DIR_APP)/%.o : \$(filter %/\$(patsubst \$(OBJ_DIR_APP)/%.d,%,\$@).cpp,\$(SOURCES_APP)) \$(OBJ_DIR_APP)/%.d
	\$(CXX) ${INSERT_CPP_PARAMETERS}  -o \$@ -c \$(filter %/\$(patsubst \$(OBJ_DIR_APP)/%.o,%,\$@).cpp,\$(SOURCES_APP))

####### Build rules
deps : \$(DEPS_LIBRARY) \$(DEPS_APP)

static_library:  \$(OBJECTS_LIBRARY)
	-\$(DEL_FILE) \$(OBJ_DIR_LIBRARY)/libisoaglib.a
	ar rcs \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$^

dynamic_library:  \$(OBJECTS_LIBRARY)
	-\$(DEL_FILE) \$(OBJ_DIR_LIBRARY)/libisoaglib.so
	\$(CXX) -shared -o \$(OBJ_DIR_LIBRARY)/libisoaglib.so \$^


all: Makefile static_library dynamic_library  \$(TARGET)
\$(TARGET):  \$(OBJECTS_APP) static_library dynamic_library
	\$(LINK) ${INSERT_LINKER_PARAMETERS_1} -o \$(TARGET)_static \$(OBJECTS_APP) \$(OBJ_DIR_LIBRARY)/libisoaglib.a ${INSERT_LINKER_PARAMETERS_2}
	\$(LINK) ${INSERT_LINKER_PARAMETERS_1} -o \$(TARGET)_dynamic \$(OBJECTS_APP) \$(OBJ_DIR_LIBRARY)/libisoaglib.so ${INSERT_LINKER_PARAMETERS_2}
	-\$(DEL_FILE) \$(TARGET)
	ln -s \$(TARGET)_static \$(TARGET)

yaccclean:
lexclean:
clean:
	-\$(DEL_FILE) \$(OBJECTS_LIBRARY) \$(DEPS_LIBRARY) \$(OBJECTS_APP) \$(DEPS_APP)
	-\$(DEL_FILE) \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$(OBJ_DIR_LIBRARY)/libisoaglib.so
	-\$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-\$(DEL_FILE) \$(TARGET)_static \$(TARGET)_dynamic \$(TARGET)


FORCE:

####### Compile


####### Install
install_library: \$(INSTALL_FILES_LIBRARY)
	mkdir -p \$(INSTALL_PATH)/lib;
	@for INSTITEM in \$(INSTALL_FILES_LIBRARY); do \\
${TAB}SEARCH=\$(ISOAGLIB_PATH)/library/xgpl_src; \\
${TAB}REPLACE=\$(INSTALL_PATH)/include; \\
${TAB}#echo "Search \$\$SEARCH -> replace \$\$REPLACE"; \\
${TAB}VAR_TEST=\`echo \$\$INSTITEM | sed -e "s#\$\$SEARCH#\$\$REPLACE#g"\`; \\
${TAB}#echo "INSTITEM \$\$INSTITEM , ISOAGLIB_PATH \$(ISOAGLIB_PATH) , INSTALL_PATH \$(INSTALL_PATH) -> VAR_TEST \$\$VAR_TEST"; \\
${TAB}DEST_PATH=\`dirname \$\$VAR_TEST\`; \\
${TAB}#echo "DestPath \$\$DEST_PATH" ; \\
${TAB}mkdir -p \$\$DEST_PATH; \\
${TAB}install -m 0644 \$\$INSTITEM \$\$DEST_PATH; \\
	done && \\
	install -m 0644 _PROJECT_CONFIG_REPLACE_ \$(INSTALL_PATH)/include; \\
	install -m 0644 \$(OBJ_DIR_LIBRARY)/libisoaglib.a \$(INSTALL_PATH)/lib/; \\
	install -m 0755 \$(OBJ_DIR_LIBRARY)/libisoaglib.so \$(INSTALL_PATH)/lib/; \\
	\$(STRIP) \$(INSTALL_PATH)/lib/libisoaglib.a; \\
	\$(STRIP) \$(INSTALL_PATH)/lib/libisoaglib.so; \\
	echo Finished installing includes/libraries to directory \\"\$(INSTALL_PATH)\\"

####### Uninstall
uninstall_library: \$(INSTALL_FILES_LIBRARY)
	@for INSTITEM in \$(INSTALL_FILES_LIBRARY); do \\
${TAB}SEARCH=\$(ISOAGLIB_PATH)/library/xgpl_src; \\
${TAB}REPLACE=\$(INSTALL_PATH)/include; \\
${TAB}#echo "Search \$\$SEARCH -> replace \$\$REPLACE"; \\
${TAB}VAR_TEST=\`echo \$\$INSTITEM | sed -e "s#\$\$SEARCH#\$\$REPLACE#g"\`; \\
${TAB}#echo "INSTITEM \$\$INSTITEM , ISOAGLIB_PATH \$(ISOAGLIB_PATH) , INSTALL_PATH \$(INSTALL_PATH) -> VAR_TEST \$\$VAR_TEST"; \\
${TAB}#echo "VAR_TEST \$\$VAR_TEST" ; \\
${TAB}rm -f \$\$VAR_TEST; \\
	done && \\
	CONFIG=\`basename _PROJECT_CONFIG_REPLACE_\`; \\
	rm \$(INSTALL_PATH)/include/\$\$CONFIG; \\
	rm \$(INSTALL_PATH)/lib/libisoaglib.a; \\
	rm \$(INSTALL_PATH)/lib/libisoaglib.so; \\
	echo Finished uninstalling includes/libraries from directory \\"\$(INSTALL_PATH)\\"

uninstall:

