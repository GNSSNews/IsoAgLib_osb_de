# This file servers as a template to use when starting a new IsoAgLib project
# Make a copy of this file and adapt it to your needs: Set mandatory values
# and activate some commented-out options (if needed)...
#
# The steps are:
#  [0. On Windows, have MSYS/MinGW installed.]
#   1. Copy conf_template -> conf_<PROJECTNAME>
#   2. Setup your wanted IsoAgLib configuration here
#   3. Create your application files (these will be collected by update_makefile.sh)
#   4. Run "<PATH_TO_bin>/update_makefile.sh conf_<PROJECTNAME>"
#       in your native Linux or MSYS/MinGW Windows shell to get the generated project


# ###############################################################
# Project Identification
# ###############################################################

# Project name - used for directory with make-/project-file
PROJECT=ProjectName

# Project author/email
# - used for IDE project file types, where the author is stored in the project file
PROJECT_AUTHOR="Author Name"
PROJECT_AUTHOR_EMAIL=MyEmail@Location


# ###############################################################
# Main IsoAgLib Path
# ###############################################################

# Path to IsoAgLib's main directory (where "library" is located in)
# relative to the directory from which "update_makefile.sh conf_<PROJECTNAME>" is called.
ISO_AG_LIB_PATH="../.."


# ###############################################################
# Selection of Application Sources
# ###############################################################
#
# NOTE: If building IsoAgLib purely as a library (currently only existing for Linux)
#       then you'll have to leave out all of the following settings in this part 

# Path(es) to the application files
# relative to the IsoAgLib-path (as specified right above here)
# (separate multiple directories by whitespace)
REL_APP_PATH="../src"

# Filename of the application
# If not set, all files of the selected directories are collected
# (separate multiple files by whitespace)
APP_SRC_FILE="ecu_main.cpp"

# File extensions to include for the application source file search
# (default: Sources: "*.c *.cc *.cpp" - Headers: "*.h *.hpp")
# APP_SEARCH_SRC_CONDITION="*.cc *.c *.cpp"
# APP_SEARCH_HDR_CONDITION="*.h *.hpp"

# Pathes which shall be excluded from the application file search
# (wildcards like "*" are allowed) 
# Example:
#    - exclude path Foo somewhere in deep dir: ".../Foo/..."
#    - exclude file Bar.cpp as part of directory Foo: ".../Foo/Bar.cpp"
#      (includes occurences of Foo.cpp in other directories!!)
# APP_PATH_EXLCUDE=""

# Filenames which shall be excluded in all directories
# (wildcards like "*" are allowed)
# Example: "test*.cpp"
# APP_SRC_EXCLUDE=""

# Additional Include pathes relative to the IsoAgLib-path.
# (directories of REL_APP_PATH are already integrated into the compiler list of header
#  include search paths - Absolute include paths to external directories should be
#  defined in config variables like:
#   - USE_WIN32_EXTERNAL_INCLUDE_PATH, USE_LINUX_EXTERNAL_INCLUDE_PATH, USE_EMBED_HEADER_DIRECTORY)
# (separate multiple directories by whitespace)
# PRJ_INCLUDE_PATH=""


# ###############################################################
# Selection of Basic Project Settings
# ###############################################################

# Optionally set individual DEFINES
# Examplary IsoAgLib debugging defines include
# - DEBUG for different internal IsoAgLib information
# - DEBUG_CAN_BUFFER_FILLING for RS232 output of MAX amount of buffered CAN messages
#   (important to decide on amount of items in the BIOS/OS CAN receive buffer)
# - DEBUG_HEAP_USEAGE for RS232 output of amount of bytes which are needed of one
#   item in the different types of dynamic lists:
#     MsgObj_c, FilterBox_c, IsoItem_c, MeasureSubprog_c, SetpointRegister
#   Additionally print calculated amount of HEAP memory which is used by the
#   several types of dynamic lists (output on each list change)
# (separate multiple defines by whitespace)
# PRJ_DEFINES=""

# Optionally replace the compiler flag default values by configured ones.
# Only valid for Linux Makefile generation currently.
# RULE_CXXFLAGS='-pipe -O -Wall -g -Wextra -Winit-self -Wmissing-include-dirs -fno-builtin -fno-exceptions -Wshadow -Wcast-qual -Wcast-align -Woverloaded-virtual -Wpointer-arith $($F PROJ_DEFINES)'

# Select if the project shall use the float data type
# default is FALSE as far as possible
# (this has impact on RS232 output and GPS decode)
# USE_FLOAT_DATA_TYPE=0

# Select if HEAP usage should reduce size in favour of speed
# (default: maximize speed, which costs about 10KByte more HEAPSIZE,
#           but avoids slow memory allocation in too small units)
# OPTIMIZE_HEAPSIZE_IN_FAVOR_OF_SPEED=0


# ###############################################################
# Basic Hardware Setup
# ###############################################################

# Select type of target system:
#   Host:        "pc_linux" | "pc_win32"
#   Embedded:    "a2" | "c2c" | "Dj1" | "ees" | "esx" | "esxu" | "p1mc"
#   Proprietary:  any other name than the above ones
USE_TARGET_SYSTEM="pc_win32"

# Specify the path to the proprietary HALs
# in case a proprietary HAL is selected above in USE_TARGET_SYSTEM
# (Note: A directory '$USE_HAL_PATH/$USE_TARGET_SYSTEM' must then exist,
#  including the subdirectories 'system', 'can', 'eeprom' and optionally
#  'rs232', 'sensor', 'actor' and/or 'datastreams'.
#  Please add this path to PRJ_INCLUDE_PATH if it's not already part of it)
# USE_HAL_PATH=""

# Specify integer number memory representation type: LITTLE or BIG ENDIAN
# default is for most targets: LITTLE -> USE_LITTLE_ENDIAN_CPU=1
# typical cases for BIG ENDIAN are some ARM and mostly all Motorola 68k and PowerPC CPUs
# USE_LITTLE_ENDIAN_CPU=1

# IsoAgLib switches by default the system relais to ON on startup
# this can be avoided by setting PRJ_DO_NOT_START_RELAIS_ON_STARTUP to 1
# PRJ_DO_NOT_START_RELAIS_ON_STARTUP=0

# Select enhanced CAN processing which is only available for some
# CAN architectures, where the OS/BIOS does already provide selective
# receive with individual <filters, mask> combinations
# (Note: This setting will be moved to the HAL soon
#  because it's actually dependent on the used platform)
PRJ_SYSTEM_WITH_ENHANCED_CAN_HAL=1

# Select wanted type of CAN driver connection:
# embedded targets: "sys"
# pc_win32 targets: "simulating" | "socket_server"
# pc_linux targets: "simulating" | "socket_server" | "msq_server" 
# (Note: "sys" for pc_linux to come soon. This will be the SocketCAN interface)
USE_CAN_DRIVER="socket_server"

# Define the amount of CAN instances to support
# ( all values lower than 1 are overwritten by default 1 )
CAN_INSTANCE_CNT=1

# Define the amount of ISOBUS protocol instances
# ( needs to be less than or equal to CAN_INSTANCE_CNT.
#   The CAN Instances [0..PRT_INSTANCE_CNT-1] are treated as ISOBUS then )
PRT_INSTANCE_CNT=1


# ###############################################################
# Core Communication Setup 
# ###############################################################
# Set value of feature to 1 if wanted - unset or set to 0 if not wanted

### General Setup
#################

# Specify if Part 3 - Data Link Layer: Basic ISOBUS Protocol is enabled.
PRJ_ISO11783=1

# Specify if Part 3 - Proprietary Messages (via Proprietary PGNs) is enabled.
# PRJ_PROPRIETARY_PGN_INTERFACE=0

# Specify if Part 6 - VT-Client support is enabled.
# PRJ_ISO_TERMINAL=1

# Specify if Part 10 - TC-Client support is enabled.
# Note: There will be an exclusive setting for TC-Client in some future
#       release of IsoAgLib analog to VT- and FS-Client.
#       Currently please enable Process-Data (PRJ_PROCESS) below.

# Specify if Part 12 - Diagnostic Services is enabled.
# Note: This is currently always added to IsoAgLib as it was
#       specified to be mandatory in the first place.

# Specify if Part 13 - FS-Client support is enabled.
# PRJ_ISO_FILESERVER_CLIENT=1

# Specify if Part 7 - all BASE data are selected
# if only special BASE data should be used select one or more of the following parts
# PRJ_BASE=0

# only incorporate parts from BASE that provide tractor hitch and RPM information
# PRJ_TRACTOR_GENERAL=0

# only incorporate parts from BASE that provide tractor moving (distance, speed, direction, ...) information
# the following project setting includes only measurement of tractor data.
# i.e. NO SETTING OF COMMANDS
# PRJ_TRACTOR_MOVE=0

# additionally integrate sending of tractor move commands
# PRJ_TRACTOR_MOVE_SETPOINT=0

# only incorporate parts from BASE that provide tractor PTO information
# the following project setting includes only measurement of tractor data.
# i.e. NO SETTING OF COMMANDS
# PRJ_TRACTOR_PTO=0

# additionally integrate sending of tractor PTO commands
# PRJ_TRACTOR_PTO_SETPOINT=0

# only incorporate parts from BASE that provide tractor lighting information
# PRJ_TRACTOR_LIGHT=0

# only incorporate parts from BASE that provide tractor auxiliary valve information
# PRJ_TRACTOR_AUX=0

# only incorporate parts from BASE that provide time and GPS information
# PRJ_TIME_GPS=0

# only incorporate parts from BASE that provide tractor guidance information
# PRJ_TRACTOR_GUIDANCE=0

# only incorporate parts from BASE that provide tractor certification information
# PRJ_TRACTOR_CERTIFICATION=0


### Special Setup / Customization / Optimization
##############################################

# Specify if Part 3 - Data Link Layer: Transport Protocol is enabled.
# (Note: This is done automatically if other features like VT-/TC-/FS-Client
#  require it - Normally you shouldn't need to set this manually!)
# PRJ_MULTIPACKET=1

# Specify Part 3 - Data Link Layer: Transport Protocol stream receive strategy:
# chunk (default): use list of chunks where each receive burst is stored in one chunk -> useful when on-the-fly parsing is used
#                  and thereby less HEAP has to be used for storage
#                  -> let PRJ_MULTIPACKET_STREAM_CHUNK stay commented out, or set to 1
# linear         : if only final parsing is used, then chunk handling can't reduce HEAP usage, so that simpler linear buffer can be used
#                  -> set  PRJ_MULTIPACKET_STREAM_CHUNK to 0
# PRJ_MULTIPACKET_STREAM_CHUNK=0

# Specify if Part 6 - VT-Client should be size optimized
#                     (leaves out unneeded object-type implementations)
# The following defines can be set to "<PATH>/<OBJECTPOOLPROJECT_NAME>-objectselection.inc"
# files created by vt2iso to specify which objects are NOT part of the object pool(s)
# and thus need not be included in IsoAgLib's VT-Client module.
# PRJ_ISO_TERMINAL_OBJECT_SELECTION1="MaskDefinition/simpleVTIsoPool-objectselection.inc"
# PRJ_ISO_TERMINAL_OBJECT_SELECTION2="<ANOTHER_POOL>-objectselection.inc"
# PRJ_ISO_TERMINAL_OBJECT_SELECTION3="<ANOTHER_POOL>-objectselection.inc"
# PRJ_ISO_TERMINAL_OBJECT_SELECTION4="<ANOTHER_POOL>-objectselection.inc"


# ###############################################################
# Process Data Communication Setup
# ###############################################################
# Note: This part is subject to be REMOVED from the API.
#       Process-Data communication will be moved to the
#       TC-Client internals. It can't be used by the Application
#       Programmer directly in the next release of IsoAgLib.

# activate globally the use of process data
# PRJ_PROCESS=0

# decide if local process data are wanted
# PROC_LOCAL=0

# select the feature set of the wanted local process data

# select standard local process data iProcDataLocal_c with
# measure programs and enhanced management of received setpoints
# PROC_LOCAL_STD=0

# select iProcDataLocalSimpleMeasure_c for
# local process data without measure programs to reduce
# HEAP useage ( all measurement programs are stored on HEAP, as
# amount of active programs depend on remote ECUs )
# PROC_LOCAL_SIMPLE_MEASURE=0

# select iProcDataLocalSimpleSetpoint_c for
# local process data without selective reaction on received setpoints
# ( simply store received setpoints and automatically ACK the receive of
#   a setpoint )
# PROC_LOCAL_SIMPLE_SETPOINT=0

# select iProcDataLocalSimpleSetpointSimpleMeasure_c for
# local process data with smallest resource needs - and most
# restricted feature set
# PROC_LOCAL_SIMPLE_MEASURE_SETPOINT=0

# decide if remote process data are wanted
# PROC_REMOTE=0

# select the feature set of the wanted remote process data

# select iProcDataRemote_c for remote process data which can
# use measure programs to request periodic measurement value update
# and which provides setpoint management which can detect current master
# setpoint ( setpoint which is ACKed by commanded device ) and the self
# requested value ( information if own setpoint is ACKed and if own
# requested setpoint interval is currently maintained by remote device
# - this can happen if intersection between ACKed setpoint request and
# own setpoint request is _not_ empty, so that commanded implement can
# satisfy both )
# PROC_REMOTE_STD=0

# select iProcDataRemoteSimpleMeasure_c if capable setpoint management
# is needed, but simple one shot measurement value request is enough
# ( reduce HEAP useage, as the potential parallel active increments are
#   stored in dynamic lists at HEAP )
# PROC_REMOTE_SIMPLE_MEASURE=0

# select iProcDataRemoteSimpleSetpoint_c if measurement programs are needed,
# but no or only simple setpoint control is wanted
# ( reduce memory useage, as no management data is needed for detection
#   of active setpoint in relation to own setpoint wish )
# PROC_REMOTE_SIMPLE_SETPOINT=0

# select iProcDataRemoteSimpleSetpointSimpleMeasure_c if only
# one shot measurement value requests and no setpoint handling is needed
# ( in relation to iProcDataRemoteSimpleSetpointSimpleMeasureCombined_c
#   the single setpoint and the single measurement value can represent
#   different values )
# PROC_REMOTE_SIMPLE_MEASURE_SETPOINT=0

# select iProcDataRemoteSimpleSetpointSimpleMeasureCombined_c for
# a very simple approach on remote process data.
# This is only useful if no distinguishing between setpoint and measurement
# value is needed
# PROC_REMOTE_SIMPLE_MEASURE_SETPOINT_COMBINED=0


# ###############################################################
# Optional Driver Selection
# ###############################################################

# select if the EEPROM driver shall be used, to read/write EEPROM
# data from within the IsoAgLib. This is important for local
# process data, as IsoAgLib can store intermediate values in EEPROM
# so that the value can be re-read on each system startup
# ( important for cumulative values like distance, when the
#   application has only to calculate the distance increments of the
#   current working session, and the IsoAgLib provides the cumulated
#   value on BUS;
#   it's also important to store the current SA on ISO 11783 address claim
#   --> try to reuse SA os last working session on next system start.
#       the application has only to specify to EEPROM address to handle the SA;
#       IsoAgLib takes then care of storing and reloading the SA )
PRJ_EEPROM=1

# select if the datastreams from HAL for file input and output shall be used
# PRJ_DATASTREAMS=0

# select iRS232IO_c for RS232 output which can be used like the
# standard C++ iostreams
# PRJ_RS232=0

# Define the amount of available RS232 channels at the ECU
# ( default 1 )
# RS232_CHANNEL_CNT=1

# Define the amount of RS232 instances to support
# ( all values lower than 1 are overwritten by default 1 )
# This is especially important if your ECU has more than one RS232 channel
# and you intend to use more than one RS232 channel at the same time.
# RS232_INSTANCE_CNT=1

# Select wanted type of RS232 driver connection: "simulating" | "sys" | "rte"
# embedded targets: "sys"
# pc_win32 targets: "sys" | "simulating"
# pc_linux targets: "sys" | "simulating" | "rte"
# USE_RS232_DRIVER="simulating"

# select special RS232 virtual driver HAL for RS232_over_CAN
# PRJ_RS232_OVER_CAN=0

# select iDigitalO_c ( one instance/variable of this class per channel )
# for digital On/Off input
# ( provides automatic range check which uses diagnose function of HAL
#  - BIOS/OS - to check if current is in allowed interval );
# use iActorO_c for global access to all active iDigitalO_c instances
# PRJ_SENSOR_DIGITAL=0

# select iAnalogI_c for analog ( current or voltage ) sensor input.
# or iAnalogIRangeCheck_c with enhanced automatic range check
# PRJ_SENSOR_ANALOG=0

# select iCounterI_c for counter input.
# the existing HAL implementations ( e.g. for ESX ) extend the BIOS/OS
# function, as a IsoAgLib specific event counting for very low
# event repetition rates is provided - the BIOS version is only
# designed for typical RPM values
# PRJ_SENSOR_COUNTER=0

# select if the digital output driver shall be integrated into the project.
# you can then use the HAL of IsoAgLib to realize a mostly hardware independend
# access on PWM output. This is completely independent from communication tasks,
# but was created during research and is actively used by OSB AG for its own
# projects
# PRJ_ACTOR=0


# ###############################################################
# Build System Configuration for LINUX
# ###############################################################

# The libraries (headers and library files) can be
# installed with "make install_library" to a global system
# directory, so that applications can be compiled with
# refering to a general system path like "/usr/local/include"
# and "/usr/local/lib".
# ISOAGLIB_INSTALL_PATH="/usr/local/"


# ###############################################################
# Build System Configuration for Cross Compilers (like Tasking EDE)
# ###############################################################

# #############################################
# Configuration options typical for embedded projects
# where the system libraries aren't placed in standard
# directories ( UNIX/LINUX has standard directories
# /usr/include, /usr/local/include, /usr/lib
# and /usr/local/lib -> IsoAgLib awaits the libraries
# in this directories for UNIX/LINUX )
# These settings are at the moment only used for project
# generation of
# + Tasking EDE
#
# But this could be extended to other compilers.
# These config settings allow to create project files
# which can be used to generate runnable HEX out of the
# box from automatic generation
# #############################################

# SETTINGS FOR EMBEDDED PROJECTS WITHIN CROSS COMPILER
# specify the path to the embedded compiler
# USE_EMBED_COMPILER_DIR="c:/programme/tasking/7.56/c166"

# specify the path ( relative to IsoAgLib root or absolute )
# to the libraries of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_LIB_DIRECTORY="library/commercial_BIOS/bios_esx"

# specify the path ( relative to IsoAgLib root or absolute )
# to the headers of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_HEADER_DIRECTORY="library/commercial_BIOS/bios_esx"

# specify the needed library files
# ( please seperate entries by whitespace )
# USE_EMBED_LIBS="C756/Xos20l.lib Module/Xma20l.lib"

# specify special source files from the BIOS/OS
# which must be inserted into the sources list
# ( e.g. startup files which could be delivered as
#   asm file and must be compiled during runtime,
#   as the BIOS/OS allows there some individual adaptation )
# ( please seperate entries by whitespace )
# USE_EMBED_BIOS_SRC="Xos20go.asm Xos20err.c xos20esx.h XOS20EEC.H XOS20EEC.OBJ"

# specify the needed linker / locater control file
# USE_EMBED_ILO="Xos20lcs.ilo"


# ###############################################################
# Build System Configuration for Win32 (Visual C++)
# ###############################################################

# specify path to headers of STLport - default corresponds to \ref Vc6StlPort
# USE_STLPORT_HEADER_DIRECTORY="C:/STLport/stlport"

# specify path to STLport libraries in case you selected the option to use the STLport
# version of IOSTREAMS ( and not the native version as advised by the doc at \ref Vc6StlPort )
# let empty if native IOSTREAMS library is used
# USE_STLPORT_LIBRARY_DIRECTORY=""

# include directory for external libraries in windows (MSVC and Dev-Cpp)
# USE_WIN32_EXTERNAL_INCLUDE_PATH=""

# library directory for external libraries in windows (MSVC and Dev-Cpp)
# USE_WIN32_EXTERNAL_LIBRARY_PATH=""

# additional libs when using MSVC (notation of library files differs between MSVC and Dev-Cpp)
# USE_MSVC_EXTERNAL_LIBRARIES=""

# additional libs when using Dev-Cpp (notation of library files differs between MSVC and Dev-Cpp)
# USE_DEVCPP_EXTERNAL_LIBRARIES=""


# ###############################################################
# Build System Configuration for gcc based cross compilers and the like
# ###############################################################

# typical development systems have a host compiler version of gcc
# in the application execution path as "gcc".
# the appropriate cross-compiler gcc is often placed in a separate directory
# with a special prefix. This can be specified by PRJ_COMPILER_BINARY_PRE
# PRJ_COMPILER_BINARY_PRE="/opt/hardhat/devkit/arm/xscale_le/bin/xscale_le-"

# include directory for external libraries in Linux (or general: Makefile based builds)
# USE_LINUX_EXTERNAL_INCLUDE_PATH=""

# library directory for external libraries in Linux (or general: Makefile based builds
# USE_LINUX_EXTERNAL_LIBRARY_PATH=""

# additional libs when using Linux (or general: Makefile based builds
# USE_LINUX_EXTERNAL_LIBRARIES=""

