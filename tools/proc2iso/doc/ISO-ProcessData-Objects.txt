/** @page XMLProcSpec Specification for ISO ProcessData XML files (device description for proc2iso)
\section XMLGeneralNotes General notes
The <i>proc2iso</i> tool is designed to work with terminal clients. 
It parses a device description given in XML format and generates a C++-bytestream for the upload to the TC and a C++-header file
with the necessary declarations for the correct constructors (see tutorials 2_0 to 2_6).<br>
Installation instructions for <i>proc2iso</i> are given in the <tt>INSTALL</tt> and <tt>INSTALL.Win32.txt</tt> files in 
<tt>library/xgpl_src/build/proc2iso</tt>.

\section proc2isoUsage proc2iso Usage
Beneath the device descriprion .xml file a xml schema has to be passed to <i>proc2iso</i> in order to 
work properly (using -s=xxx.xsd switch).
Win32 users can call proc2iso.cmd directly from the the directory where the device description .xml file
resides, as the script will automatically call <tt>proc2iso.exe</tt> like this:<br>
<tt>proc2iso.exe -s=[path to proc2iso.exe]proc2iso.xsd [device description].xml</tt>.

\code
proc2iso BUILD DATE: 14-Feb-2008

Usage:
 proc2iso [options] <XML file>

This program invokes the DOMBuilder, builds the DOM tree,
and then converts the tree to ISO Process Data cpp-files.

Input files are all files starting with <XML file>,
sorted by alphabetical order.
This has been done to give the possibility to split
large XML files into several ones.

Options:
 -v=xxx     Validation scheme [always | never | auto]. Defaults to auto
 -n         Enable namespace processing. Defaults to off.
 -f         Enable full schema constraint checking. Defaults to off.
 -s=xxx.xsd       Enable scheme processing with XML scheme xxx.xsd either from the path relative to the directory of the device description
       OR the absolute pathname starting with '/' (Linux) or '\' (Win).
       Defaults to off.       Using an XML scheme will also set the necessary options for namespace, validation scheme and full schema constraint checking
 -locale=ll_CC  specify the locale. Defaults to en_US.
 -?         Show this help.
\endcode

\section XMLUsage Usage in your own project
- First, include the necessary header in your main-file
- That could be like that:
\code
#include "../2_0_LocalReadDataStdIso/devicedescription/DeviceDescription.xml-func.h"
\endcode
- That header includes the bytestream generated from proc2iso and all process data declarations.
- To make that device description known in the TC client it has to be stored in a map (with possibly more and other device descriptions)
\code
bool b_registerSuccess = getIProcessInstance().getDevPropertyHandlerInstance().registerDevicePool(&c_myIdent, deviceDescription_de,
                         ui32_arrayLength_de, true);
\endcode
- If the device pool was registered successfully the function returns true. The ending of <tt>deviceDescription_xx</tt> and
  <tt>ui32_arrayLength_xx</tt> depends on the language <br>
  code in the localization label of the device description and has to be hand customized.

\section XMLGeneralStructure General structure of the XML-file
First of all some general rules for the structure of a device description.
- All elements of one device must be included in one XML-file.
- Per XML-file only one <b>\<device\></b> XML-element is allowed. It is the root element and includes all other XML-elements.<br>
Have a look at a little codesnippet to show that root element:
\code
<device designator="Device1" software_version="0.1" workingset_mastername="Ma00a1900ffe0001b" serialnumber="WXYZ999" structure_label="STRUCT4"
        localization_label="de50015A56FF" device_program_name="myDevice">
[...]
</device>
\endcode

A further code example shows how XML-elements have to be nested in the root element:
\code
<device designator="Device1" software_version="0.1" workingset_mastername="Ma00a1900ffe0001b" serialnumber="WXYZ999" structure_label="STRUCT4"
        localization_label="de50015A56FF" device_program_name="myDevice">
  <deviceelement designator="DeviceElement1" element_type="device" element_number="2" parent_name="Device1">
    <deviceprocessdata designator="On Off" ddi="0x008D" properties="defaultset" trigger_methods="timeinterval" proc_program_name="myOnoff"
                       cumulative_value="false">
      <deviceprocessdatacombination ddi="0x008D" command_type="exact" is_setpoint="true"/>
    </deviceprocessdata>
  </deviceelement>
</device>
\endcode

\section XMLNamingConvention Naming-Conventions for \< TAG attribute =' value ' \>
<ul>
<li> All elements are named according to <b>ISO 11783</b>. A further XML-element was added to enable processdata elements with more than one DDI
     (e.g. with min and max values). It is called <b>deviceprocessdatacombination</b>.<br>
     <i>Example:</i> processdata Bale Size: there are five different defined DDI's for the bale size. Often it is necessary to get several
     measurement or setpoint values from one processdata.
<li> <b>Tag</b>s are written WITHOUT underscores or spaces (for example "<deviceprocessdata>").
<li> <b>Attribute</b>s are written only WITH underscores (for example "command_type=").
<li> <b>Values</b> are written WITHOUT underscores or spaces, the name of the XML-element is an exception (for example "defaultset").
</ul>

\section XMLNesting Using objects: Allowed object nesting
The following table shows which objects may be included into which other.
<table>
<tr><th>  Name of XML-Tag </th> <th> Allowed inclusion of objects of following types
</th></tr><tr><td>  device                        </td><td> DeviceElement | DeviceValuePresentation</td>
</td></tr><tr><td>  deviceelement                 </td><td> DeviceProcessData | DeviceProperty
</td></tr><tr><td>  deviceprocessdata             </td><td> DeviceProcessDataCombination
</td></tr><tr><td>  deviceproperty                </td><td> none
</td></tr><tr><td>  deviceprocessdatacombination  </td><td> none
</td></tr><tr><td>  devicevaluepresentation       </td><td> none
</td></tr>
</table>

\section XMLReference Reference for correct attribute names
Next table gives an overview of all available attributes with value range.
<table><tr><th> attribute name </th><th> attribute type</th></tr>
<tr><td>designator</td><td> Chose a name which is descriptive for the represented element, max. 32 chars </td></tr>
<tr><td>software_version</td><td> Device software version, max. 32 chars</td></tr>
<tr><td>workingset_mastername</td><td> Double Integer, \ref XMLWSName "Special treatment of Working Set Master NAME"</td></tr>
<tr><td>serialnumber</td><td> Device Serial Number, max. 32 chars </td></tr>
<tr><td>structure_label</td><td> Label given by Device to identify Device Description Structure, max. 7 chars </td></tr>
<tr><td>localization_label</td><td> Label given by Device to identify Device Description Localization (Byte 1 to 6 defined by the Language Command
        PGN <br> (see ISO 11873-7), Byte 7 is reserved and set to 0xFF) </td></tr>
<tr><td>element_type</td><td> \ref XMLDETType or directly 1..7 </td></tr>
<tr><td>element_number</td><td> Integer, 0...4095 </td></tr>
<tr><td>parent_name</td><td> Name of parent DeviceElementObject or DeviceObject to establish a hierarchical of device elements </td></tr>
<tr><td>ddi</td><td> Integer, 0...65535 </td></tr>
<tr><td>properties</td><td> Integer, 1 or 2</td></tr>
<tr><td>trigger_methods</td><td> \ref XMLTriggerMethods "Trigger methods" </td></tr>
<tr><td>device_value_presentation_name</td><td> Is used, if a DeviceValuePresentationObject is referenced. If nothing is referenced leave it out.
        </td></tr>
<tr><td>property_value</td><td> Signed Integer, -2<sup>31</sup>...(2<sup>31</sup>-1) </td></tr>
<tr><td>offset</td><td> Signed Integer, -2<sup>31</sup>...(2<sup>31</sup>-1) </td></tr>
<tr><td>scale</td><td> Float, 0.000000001...100000000.0</td></tr>
<tr><td>number_of_decimals</td><td>  Byte, 0...7 </td></tr>
<tr><td>unit_designator</td><td> String, max. 32 chars </td></tr>
<tr><td>self_configurable_address</td><td> 1 Bit, 0 or 1, default: 0 </td></tr>
<tr><td>industry_group</td><td> 3 Bit, 0...8, default: 2 </td></tr>
<tr><td>function</td><td> 8 Bit, 0...255, default: 25 </td></tr>
<tr><td>wanted_sa</td><td> Integer, default: 128 </td></tr>
<tr><td>function_instance</td><td> 5 Bit, 0...32, default: 0 </td></tr>
<tr><td>ecu_instance</td><td> 3 Bit, 0...8, default: 0 </td></tr>
<tr><td>store_sa_at_eeprom_address</td><td> if a source address (sa) was assigned to a self-configurable device, that sa should be assigned too
        for next powercycle, <br>
        default: 0xFFFF </td></tr>
<tr><td>manufacturer_code</td><td> 11 Bit, 0...2048 </td></tr>
<tr><td>device_class</td><td> 7 Bit, 0...128 </td></tr>
<tr><td>device_class_instance</td><td> 4 Bit, 0...16 </td></tr>
<tr><td>ws_identity_number</td><td> 21 Bit, 0...2097152 </td></tr>
<tr><td>feature_set</td><td> \ref XMLFeatureSet "Feature set" </td></tr>
<tr><td>priority</td><td> Is used as a parameter in the processdata contructor and is a priority code of messages with this processdata
        instance. <br>It is set to 2 by default. </td></tr>
<tr><td>device_program_name</td><td> String, name of the device in the main-file</td></tr>
<tr><td>proc_program_name</td><td> String, name of the processdata in the main-file </td></tr>
<tr><td>cumulative_value</td><td> \ref XMLCumulativeValue "Cumulative value" </td></tr>
<tr><td>command_type</td><td> \ref XMLCommandType "Command types" </td></tr>
<tr><td>is_setpoint</td><td> \ref XMLCommandType "Set point" </td></tr>
</table>

\section XMLAttributesForElement Allowed attributes for a XML-element
The following listing shows for every XML-element what attributes are available. If an attribute is required it has to be set to a valid value
otherwise the parser interrupts. <br>
If an attribute is not required, it means that is will be set to a default value.
<table><tr><th> XML-element </th><th> Name of attribute </th><th> Required </th></tr>
<tr><td> \anchor XMLDVC device </td><td> designator </td><td> yes </td></tr>
<tr><td>  </td><td> software_version </td><td> yes </td></tr>
<tr><td>  </td><td> workingset_mastername </td><td> yes, or splitted in 9 parts see the following </td></tr>
<tr><td>  </td><td> self_configurable_address </td><td> no (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> industry_group </td><td> no (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> function </td><td> no (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> function_instance </td><td> no (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> ecu_instance </td><td> no (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> manufacturer_code </td><td> yes (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> device_class </td><td> yes (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> device_class_instance </td><td> yes (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> ws_identity_number </td><td> yes (use if workingset_mastername is left out) </td></tr>
<tr><td>  </td><td> serialnumber </td><td> yes </td></tr>
<tr><td>  </td><td> structure_label </td><td> yes </td></tr>
<tr><td>  </td><td> localization_label </td><td> yes </td></tr>
<tr><td>  </td><td> device_program_name </td><td> yes </td></tr>
<tr><td>  </td><td> wanted_sa </td><td> no </td></tr>
<tr><td>  </td><td> store_sa_at_eeprom_address </td><td> no </td></tr>
<tr><td> \anchor XMLDET deviceelement </td><td> designator </td><td> no </td></tr>
<tr><td>  </td><td> element_type </td><td> yes </td></tr>
<tr><td>  </td><td> element_number </td><td> no </td></tr>
<tr><td>  </td><td> parent_name </td><td> yes </td></tr>
<tr><td> \anchor XMLDPD deviceprocessdata </td><td> designator </td><td> yes, \ref XMLProcessDataName "restricted" to 30 chars </td></tr>
<tr><td>  </td><td> ddi </td><td> yes </td></tr>
<tr><td>  </td><td> properties </td><td> no </td></tr>
<tr><td>  </td><td> trigger_methods </td><td> no </td></tr>
<tr><td>  </td><td> proc_program_name </td><td> yes </td></tr>
<tr><td>  </td><td> cumulative_value </td><td> no </td></tr>
<tr><td>  </td><td> priority </td><td> no </td></tr>
<tr><td>  </td><td> device_value_presentation_name </td><td> no </td></tr>
<tr><td> \anchor XMLDPT deviceproperty</td><td> designator </td><td> no </td></tr>
<tr><td>  </td><td> ddi </td><td> yes </td></tr>
<tr><td>  </td><td> property_value </td><td> yes </td></tr>
<tr><td>  </td><td> device_value_presentation_name </td><td> no </td></tr>
<tr><td> \anchor XMLDPC deviceprocessdatacombination </td><td> ddi </td><td> yes </td></tr>
<tr><td>  </td><td> command_type </td><td> no </td></tr>
<tr><td>  </td><td> is_setpoint </td><td> yes </td></tr>
<tr><td> \anchor XMLDVP devicevaluepresentation </td><td> designator </td><td> yes </td></tr>
<tr><td>  </td><td> offset </td><td> yes </td></tr>
<tr><td>  </td><td> scale </td><td> yes </td></tr>
<tr><td>  </td><td> number_of_decimals </td><td> yes </td></tr>
<tr><td>  </td><td> unit_designator </td><td> no </td></tr>
</table>

\section XMLDETType Device Element Types
If you want to specify what type a device element is, the attribute value has a range of 1...7 (see ISO 11873-10 Annex A.3), alternatively you
can use one of the following 7 device element type constants:<p>
<table><tr><th> Name of device element type </th></tr>
<tr><td>(1) device</td></tr>
<tr><td>(2) function</td></tr>
<tr><td>(3) bin</td></tr>
<tr><td>(4) section</td></tr>
<tr><td>(5) unit</td></tr>
<tr><td>(6) connector</td></tr>
<tr><td>(7) navigationreference</td></tr>
</table>

\section XMLTriggerMethods Trigger methods
If you want to specify the trigger method for a device process data, the attribute value has a range of 0...31 (see ISO 11873-10 Annex A.4),
alternatively you can use one of the following 5 trigger method constants:<p>
<table><tr><th> Name of trigger method </th></tr>
<tr><td> (1) timeinterval</td></tr>
<tr><td> (2) distanceinterval</td></tr>
<tr><td> (4) threshold limits</td></tr>
<tr><td> (8) onchange</td></tr>
<tr><td>(16) counter</td></tr>
</table>

\section XMLFeatureSet Feature Set
Commonly, there are several processdata value for measurement, but if the user is sure that there is only one processdata value for measuring,
he can decide to chose between the following
<table><tr><th> value of feature_set </th></tr>
<tr><td> Standard </td><td> (recommended) just leave that attribute out </td></tr>
<tr><td> SimpleMeasure</td><td> only one value will be measured (the last, although several process data values are available) </td></tr>
<tr><td> SimpleSetpoint</td><td> only one value will be set point (the last, although several process data values are available) </td></tr>
<tr><td> SimpleSetpointSimpleMeasure</td><td> only one value will be measured and set point (the last, although there are more process data
values) </td></tr>
</table>

\section XMLCumulativeValue Cumulative value
<ul>
<li> Cumulative values are values like area, distance or time. The value of the measure data sets is updated on master value update dependent
on the value increment since the last master value update.
<li> If a remote member resets his data set copy, datas of other members aren't changed<br>
<li> Non-cumulative values like speed, state, rpm are not updated by increment. They are set directly.<br>
\ref XMLTruth "Truth values"
</ul>

\section XMLCommandType Command types and set point
<table><tr><th> Command types </th></tr>
  <tr><td> exact </td></tr>
  <tr><td> default </td></tr>
  <tr><td> min </td></tr>
  <tr><td> max </td></tr>
</table>
<p>
Possible values of is_setpoint: \ref XMLTruth "Truth values"
<ul>
<li> The different command types and setpoint are working together.
<li> If is_setpoint is <b>false</b>, all measurements are exact.
<li> If is_setpoint is <b>true</b>, all measurements are set point.
</ul>

\section XMLProcessDataName "About the designator of a DeviceProcessData element"
Using a processdata element with a DDI group needs some naming convention. For every \ref XMLDPC "deviceprocessdatacombination" the
command_type and if measurement or not attribute is required. So the designator of the deviceprocessdata is extended with '_x'. x stands for:
<p>
<table><tr><th>extension</th><th> Command types </th></tr>
  <tr><td> 0 </td><td> exact setpoint </td></tr>
  <tr><td> 1 </td><td> default (is always setpoint) </td></tr>
  <tr><td> 2 </td><td> min setpoint </td></tr>
  <tr><td> 3 </td><td> max setpoint </td></tr>
  <tr><td> 4 </td><td> exact measurement </td></tr>
  <tr><td> - </td><td> not used </td></tr>
  <tr><td> 6 </td><td> min measurement </td></tr>
  <tr><td> 7 </td><td> max measurement </td></tr>
</table>
<p>
E.g. CylinderPressure_4 means a exact measurement value DDI. For those two additional characters the length of the deviceprocessdata designator is
restricted to 30 characters.


\section XMLWSName Special treatment of Working Set Master NAME
<ul>
<li> The Working Set Master NAME is also called isoname. It consists of nine parts with different information.
<li> First possibility is to specify the working set master name as a whole double integer with 8 byte. It has to start with the character
<b>L</b> (for least significant bit) or <b>M</b> (most significant bit).
<li> That is necessary because of different storage methods (endianess).
</ul>
The workingset master name looks like that:
\code
<device [...] workingset_mastername="Ma00a1900ffe0001b" [...]>
\endcode
<br>
The other possibility is to specify every single part of the workingset master name:
<br>
\code
<device [...] self_configurable_address="false" industry_group="2" device_class_instance="0" device_class="1" function="25" function_instance="0"
 ecu_instance="0" manufacturer_code="0x17" ws_identity_number="0x1BB000" [...]/>
\endcode
If <b>self_configurable_address</b>, <b>industry_group</b>, <b>function</b>, <b>function_instance</b> and <b>ecu_instance</b> are not given
they will be set to default values.
Value ranges are defined in section \ref XMLReference "Reference for correct attribute names".

\section XMLTruth Truth values
<table><tr><th> Truth values </th></tr>
<tr><td> true/yes </td></tr>
<tr><td> false/no </td></tr>
</table>


\section DefaultDataLogging Default data logging
IsoAgLib supports the default data logging mechanism, described in section 6.6.2 in the task controller specification. 
To enable default data logging in your application add the following deviceprocessdata to your device description XML file:
\code
<deviceprocessdata designator="default logging" ddi="0xDFFF" properties="defaultset" trigger_methods="timeinterval" 
                   proc_program_name="defaultLogging" cumulative_value="false">
    <deviceprocessdatacombination ddi="0xDFFF" command_type="exact" is_setpoint="false" />
</deviceprocessdata>
\endcode

See also \ref DefaultDataLoggingExample.
*/
