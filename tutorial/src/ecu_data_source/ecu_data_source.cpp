#include "tutorial_settings.h"

// components
#include "component_tcclient_dfff.h"
#include "component_simulatedsource.h"

// IsoAgLib
#include <IsoAgLib/driver/can/icanio_c.h>
#include <IsoAgLib/comm/Part5_NetworkManagement/impl/isomonitor_c.h>

// Certification needs access to the generated IsoAgLib::iIdentItem
#include <IsoAgLib/comm/Part5_NetworkManagement/iidentitem_c.h>
extern IsoAgLib::iIdentItem_c c_myIdent;


IsoAgLibTutorialDataSource::TutorialDataSource_c* p_dataSource;
IsoAgLibTutorialDataSource::TutorialDataSourceSimulation_c* p_simulatedSource;

bool ecuMain() {

  if ( ! IsoAgLib::getIcanInstance().init( IsoAgLibTutorial::scui_isoBusNumber ) ) {
    return false;
  }

  p_dataSource = new IsoAgLibTutorialDataSource::TutorialDataSource_c();
  p_simulatedSource = new IsoAgLibTutorialDataSource::TutorialDataSourceSimulation_c();

  if ( !p_dataSource )
    return false;

  /**
   * Here we're using the iIdentItem_c instance generated by proc2iso
   * placed in the file "tutorialDataSource-func.h".
   * Note: This will be made more flexible in a future version of IsoAgLib/proc2iso
   *       so that you can supply your iIdentItem_c instance to the TC-Client and
   *       are not forced to use the generated one.
   * Currently we therefore need the following workaround call to get proper Network-
   * Management capabilities.
   * Reason: As the iIdentItem_c instance is global, it is being initialized before the
   *         CAN-Bus is initialized, so we need to repeat the initialization message here.
   */
  __IsoAgLib::getIsoMonitorInstance().sendRequestForClaimedAddress();

  c_myIdent.setEcuIdentification( "PartNr T", "Serial 127", "Frontside", "PD Supplier", "OSB AG" ); // dummy values
  c_myIdent.setSwIdentification( "IsoAgLib Data Source DFFF ECU Tutorial*" );
  c_myIdent.setCertificationData(
    2009, // certification year
    IsoAgLib::CertificationRevisionNotAvailable,
    IsoAgLib::CertificationLabTypeNotAvailable,
    42, // dummy laboratory id
    IsoAgLib::CertificationBitMask_t()
      .setBit (IsoAgLib::CertificationTcWsMaster)
      .setBit (IsoAgLib::CertificationMinEcu),
    8); // dummy reference number

  p_dataSource->init();
  p_simulatedSource->init();

  p_simulatedSource->registerDataSource( *p_dataSource );

  return true;
}


bool ecuShutdown()
{
  p_simulatedSource->unRegisterDataSource( *p_dataSource );

  delete p_simulatedSource;
  delete p_dataSource;

  return true;
}
