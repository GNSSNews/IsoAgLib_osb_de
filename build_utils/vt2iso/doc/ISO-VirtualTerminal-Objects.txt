/** @page XMLspec Information on vt2iso & Specification for ISO VirtualTerminal XML files
\section XMLGeneralNotes vt2iso Notes & Features
<b>vt2iso...</b>
<ul>
<li> ...is an <b>XML to C-Source converter</b> that converts your object-pool (described in XML) to C-source files (that have to be included in your application then).
<li> ...supports VTs that don't scale picture-graphics (only some old ones out that don't) in order to let the designer add pre-scaled-bitmaps. This is also helpful if you want to supply "better-then-VT-scaled" versions for some VTs.
<li> ...supports multi-language objectpools. Changing language is support by IsoAgLib's VT-Client and will automatically make use of multi-language pools.
</ul>

\section XMLUsage Usage in your own project
First of all, it is very helpful to have a look to the <b> Tutorial 3.0 </b>. Other than that, read on here or contact the IsoAgLib mailing list for further help.
<p>
\subsection vt2isoImplementation Modes
Generally, there are two ways you can implement your generated objectpool into your application: As a <b>Standalone Class (direct)</b> or as a <b>Derived Class (derived)</b>. Note that always both versions are created by vt2iso.
<ul>
  <li> Use the generated <i>iObjectPool</i> class as standalone (direct, as implemented in the Tutorial 3.0):
    <ul>
      <li> Take a look at the following example, in which the <i>iObjectPool</i> class is generated for standalone use:
      <li> Include the necessary headers through one collective include file
      \code
      #include "MaskDefinition/simpleVTIsoPool_direct.h"
      \endcode
      <li> Then implement the neccessary methods from <i>iObjectPool_simpleVTIsoPool_c</i>, whereas "simpleVTIsoPool" is generated from the filename of your XML!
      \code
      void iObjectPool_simpleVTIsoPool_c::eventKeyCode (uint8_t keyActivationCode, uint16_t objId, uint16_t objIdMask, uint8_t keyCode, bool wasButton) { ... }
      void iObjectPool_simpleVTIsoPool_c::eventNumericValue (uint16_t objId, uint8_t ui8_value, uint32_t ui32_value) { ... }
      void iObjectPool_simpleVTIsoPool_c::eventStringValue (uint16_t rui16_objId, uint8_t rui8_length, StreamInput_c &refc_streaminput, uint8_t rui8_unparsedBytes, bool b_isFirst, bool b_isLast) { ... }
      void iObjectPool_simpleVTIsoPool_c::eventObjectPoolUploadedSuccessfully (bool rb_wasLanguageUpdate, int8_t ri8_languageIndex, uint16_t rui16_languageCode) { ... }
      void iObjectPool_simpleVTIsoPool_c::eventEnterSafeState () { ... }
      \endcode
      <li> There are more methods that CAN be implemented. If you want to, you have to uncomment them in <i>MaskDefinition/simpleVTIsoPool-handler-direct.inc</i>. These are the following ones:
      \code
      //virtual void eventPointingEvent (uint16_t rui16_xPosition, uint16_t rui16_yPosition);
      //virtual void eventStringValueAbort ();
      //virtual void eventPrepareForLanguageChange (int8_t ri8_languageIndex, uint16_t rui16_languageCode);
      //virtual void eventCommandResponse (uint8_t rui8_responseCommandError, const uint8_t rpui8_responseDataBytes[8]);
      //virtual uint8_t convertColour (uint8_t colourValue, uint8_t colourDepth, IsoAgLib::iVtObject_c* obj, IsoAgLib::e_vtColour whic
      //virtual void eventLanguagePgn (const localSettings_s& rrefs_localSettings);
      //virtual void eventVtStatusMsg ();
      \endcode
      <li> <b>Note:</b> vt2iso does NOT override the manual changes (uncommenting some of those methods for implementation) you may have made in the <i>MaskDefinition/simpleVTIsoPool-handler-direct.inc</i> file, so it will NOT override this file at the next call of vt2iso, but will name the file <i>MaskDefinition/simpleVTIsoPool-handler-direct.inc-template</i> then. Only if new functions are added there, you may need to copy the template file over or add the new functions from the template file by hand!
      <li> It's important that <i>eventObjectPoolUploadedSuccessfully</i> updates all necessary values of the objectpool. It will be called everytime the pool is uploaded/loaded from non-volatile-storage (harddisk, flashdisk, etc.). This is also the case when the VT is switched off and on during operation!

      <li> In direct use create an instance of that class like the following code:
      \code
      static iObjectPool_simpleVTIsoPool_c MyObjectPool_c;
      \endcode
    </ul>
  <li> Use the generated <i>iObjectPool</i> class to derive your class from (derived):
    <ul>
      <li> If you want to derive your main-class from <i>iObjectPool_simpleVTIsoPool_c</i>, you should use the following directive
      \code
      #include "MaskDefinition/simpleVTIsoPool.xml_derived-cpp.h"
      \endcode
      in your ".cpp" file (that's why its name is "-cpp.h") and
      \code
      #include "MaskDefinition/simpleVTIsoPool.xml_derived-h.h"
      \endcode
      in your ".h" file (that's why its name is "-h.h").<br> That's all to include.
    </ul>
</ul>

In all cases init the ISO-Terminal the following way (If no WorkingSet-Name is given (NULL), the pool won't be saved in nv-storage from the VT!):
\code
getIisoTerminalInstance().init (&c_myIdent, &MyPool_c, "WS-Name");
// Refer to IsoAgLib::iISOTerminal_c::init(...) for more information.
\endcode
<p>
\subsection Function Control Flow
Assuming the following (illustrating) sequences, the according handlers will be called as described here:
<ol>
  <li> The objectpool has been uploaded or loaded from nonvolatile-storage successfully. It's being (up)loaded in the language currently setup, or the default language (if the setup language is not supported in the workingset). <b>eventObjectPoolUploadedSuccessfully</b> will be called with paramter <b>rb_wasLanguageUpdate == false</b> and the language it was uploaded to the VT in <b>ri8_languageIndex</b> and <b>rui16_languageCode</b> (see \ref LanguageInfo "Language Information").
  <li> The Operator changes the language. If there's an update of the objectpool required, <b>eventPrepareForLanguageChange</b> is called (with the new \ref LanguageInfo "Language Information") so the application can issue some commands BEFORE the partial object pool will take place. This is important if the partial language pool update takes a while (when there're many language-dependend objects) and the ECU won't be able react on anything. So the best thing would be to issue a change to a special "Wait while changing language..."-mask here.
       (Note that this may not occur on all changes. Changing from one unsupported language to another unsupported will NOT lead to anything (no pool update, no handler getting called!))
  <li> After the language update has succeeded, <b>eventObjectPoolUploadedSuccessfully</b> will be called with paramter <b>rb_wasLanguageUpdate == true</b> and the language it was changed to in <b>ri8_languageIndex</b> and <b>rui16_languageCode</b> (see \ref LanguageInfo "Language Information"). Based on <b>rb_wasLanguageUpdate == true</b> it can now be switched back from the "Wait while changing language..."-mask if it was changed to such a mask.
  <li> Now lets assume that the VT drops off-line. The workingset has to enter a safe state according to the ISO specs, so <b>eventEnterSafeState ()</b> is being called. The application should then stop all VT operation (change commands, etc.) for now.
  <li> After the VT is turned back on and the objectpool has been successfully re(up)loaded, <b>eventObjectPoolUploadedSuccessfully</b> will be called again with paramter <b>rb_wasLanguageUpdate == false</b> and the language it was uploaded to the VT in <b>ri8_languageIndex</b> and <b>rui16_languageCode</b>.
</ol>
During operation the following events can occur, which will lead to the their associated handlers being called:
<ul>
  <li> The operator presses a softkey or button: <b>eventKeyCode (uint8_t keyActivationCode, uint16_t objId, uint16_t objIdMask, uint8_t keyCode, bool wasButton)</b>
  <li> The operator enters a numeric value in an InputNumber field, (de)selects an InputBoolean field or selects an entry of an InputList: <b>eventNumericValue (uint16_t objId, uint8_t ui8_value, uint32_t ui32_value)</b>
  <li> The operator enters text in an InputString field: <b>eventStringValue (uint16_t rui16_objId, uint8_t rui8_length, StreamInput_c &refc_streaminput, uint8_t rui8_unparsedBytes, bool b_isFirst, bool b_isLast)</b> - for normal operation only react when rb_isLast==true See the Tutorial 3.0 example.
  <li> The operator presses on the touch-screen or alike in a region where no input field has been placed, so <b>eventPointingEvent (uint16_t rui16_xPosition, uint16_t rui16_yPosition)</b> gets called. NOTE that the positions are the actual positions from the VT and NOT positions from your objectpool. Remember that your objectpool's coordinates/size are probably scaled to completely fill out the mask's area! ALSO NOTE that this MAY BE CHANGED at a later time to deliver unified objectpool coordinates, or probably both to avoid any misinterpretation. So for now you'll have to dived the coordinates by the scaling factor!
  <li> If due to some connection problems a string value activation command, that is being sent via TransportProtocol, from the VT to the ECU is aborted in between, <b>eventStringValueAbort()</b> is called. You need ONLY care for this event if you do partial parsing of the string via eventStringValue. If you only parse the string when it's completely received (by b_isLast==true), then you do NOT have to care about this message (which is the normal case!).
  <li> If you care for the response of a command, you can overload <b>eventCommandResponse (uint8_t rui8_responseCommandError, const uint8_t rpui8_responseDataBytes[8])</b>. It will be called when receiving a response. I a message times out, NO notification is done yet.
</ul>
The next events can occur anytime, not only when the objectpool is on display!
<ul>
  <li> When the operator changes Language, Units, Time-Display, etc. the handler <b>eventLanguagePgn (const localSettings_s& rrefs_localSettings)</b> will be called.
  <li> When the VT sends it Status Message, the <b>eventVtStatusMsg()</b> handler is called. If you want to react on those messages, override the function, if not, do not bother at all (normal case).
</ul>
During upload, the following function will get called:
<ul>
  <li> <b>convertColour (...)</b>: Its purpose is to map the colours of the objectpool to the colours that can be display. Remember, we have to display correctly on 2- and 16-color VTs, too! Normally the default implementation should do a good job if you don't use any of the colors 16-255...
</ul>


\section XMLGeneralStructure General structure of the XML-file(s)
<ul>
  <li> You can split your object-pool-definition to several XML files so you don't have one big XML file. It's NO difference if you split it up or not - it's only for readability!
  <li> The parser will treat all XML files matching your base-filename (for example <i>simpleVTIsoPool</i>) as one big XML file, ordered alphabetically.
  <li> Thus having created the files <i>simpleVTIsoPool00_WorkingSetAndVariables.xml</i> and <i>simpleVTIsoPool01_DataMask1.xml</i>, you'd simply pass the base-filename <b>simpleVTIsoPool</b> as parameter to the conversion script (which invokes vt2iso).
  <li> Root-Attributes (given in &lt;objectpool&gt;)
    <ul>
      <li> Only the first XML file in alphabetical order MUST HAVE the following attributes:
        <ul>
          <li> <i>dimension='...'</i>: Specify the datamask-size for which you're designing your objectpool's datamask (it's square, so one dimension is enough). IsoAgLib will automatically scale to the VT's datamask size.
          <li> <i>std_bitmap_path='...'</i>: Specify the path to the standard/normal bitmaps.
          <li> <i>fix_bitmap_path='...'</i>: Specify the path to the fixed-size bitmaps.
        </ul>
      <li> Only the first XML file in alphabetical order CAN HAVE the following attributes:
        <ul>
          <li> <i>sk_width='...'</i> and <i>sk_height='...'</i> (defaults to 60x32): Specify the softkeymask-size for which you're designing your objectpool's softkeymask. IsoAgLib will automatically scale & center to the VT's softkeymask size.
          <li> <i>auto_language='...'</i> (defaults to unused): Specify in which languages the objects InputString and StringVariable should be available automatically. This value is simply set as default for <i>language='...'</i> in those objects. You can enumerate the languages like <i>language='en+de+it'</i> or specify all languages using '*'. For more information see \ref MultiLanguage "MultiLanguage".
        </ul>
    </ul>
</ul>
Take a look at the following snippet of <i>simpleVTIsoPool.xml-0_WorkingSetAndVariables</i>, which is the first in alpabetical order and has the dimension and path-attributes set:
\code
<?xml version="1.0" encoding="iso-8859-1"?>

<objectpool dimension='200' std_bitmap_path='bitmaps' fix_bitmap_path='bitmaps-vario240'>

  <workingset name='MyWorkingSet' background_colour='white' selectable='yes' active_mask='MyDataMask1'>
    <!-- WorkingSet Descriptor Object shall be included here -->
  </workingset>

  <!-- All other objects can be defined now... -->
</objectpool>
\endcode
Now here's a snippet from <i>simpleVTIsoPool.xml-1_DataMask1</i>:
\code
<?xml version="1.0" encoding="iso-8859-1"?>

<objectpool> <!-- dimension and bitmap_path needn't (and mustn't) be defined again! -->

  <datamask id='0815' name='MyDataMask1' background_colour='white' soft_key_mask='MySoftKeyMask1' >

    <container name='MyDataMask1Container1' pos_x='0' pos_y='0' width='200' height='100'>
      <!-- object included in the container following... -->
    </container>

    <!-- more objects in this datamask can be defined now. -->

  </datamask>

  <!-- still more objects in this objectpool can be defined now... -->
</objectpool>
\endcode

\section MultiLanguage HOW TO design a multi-language objectpool
As you already specify in the \<workingset\> object which languages are supported by this workingset, vt2iso/IsoAgLib uses these languages for the multi-language support.

You can either not specify any language at all (if you only have one fix language in your workingset) or use the multilanguage feature and specify a number of languages like
\code
  <workingset name='MyMultiLanguageWorkingSet' background_colour='white' selectable='yes' active_mask='MyDataMask1'>
    <!-- WorkingSet Descriptor Object shall be included here -->
    <language code='en' /> <!-- Note that the first language is the default language! -->
    <language code='de' />
    <language code='it' />
  </workingset>
\endcode
Note that the first language is the default language! The default language is used when the operator selects a language from the VT's language selection that is NOT supported by the workingset, i.e. is not listed in the \<workingset\> object.

Important to know is that there will be two parts generated from your object pool: The <i>general</i> part and the <i>language specific</i> part.
Without specifying the language in an object, the object will be placed in the general part.

Now you have to decide which objects should depend on the selected language. Not only texts-objects can be exchanged but also any kind of object, e.g. picture-graphics, font-attributes, etc.
If you want to ... work-in-progress...


\section XMLNamingConvention Naming-Conventions for \< TAG attribute =' value ' \>
<ul>
<li> Everything is named according to <b>ISO 11783</b>.
<li> <b>Tag</b>s are written WITHOUT underscores/spaces (for example "<picturegraphic>").
<li> <b>Attribute</b>s are written WITH underscores (for example "font_size=").
<li> <b>Values</b> are written WITHOUT underscores/spaces and can be combined using "+" (for example "border+ticks+growpositive").
</ul>

\section XMLIdentifiers Important note on Identifiers ( IDs )
<ul>
<li> If <b>no</b> ObjectID (for example "id='12345'") is given, an automatcially numbered ID is assigned, starting at the highest allowed ID (65534), counting downwards.
<li> If <b>no</b> KeyCode ('key_code=...') is given, an automatically numbered KeyCode is assigned, starting at the almost highest allowed KeyCode (254), counting downwards.
<li> If you want to use your own ObjectID, please use the lower range of [256...65534]
<li> IDs of Macro Objects must fit into one byte, so they should be in the range of [0..255]. They will automatically be generated this way, starting at 255 downwards.
<li> If you want to use your own KeyCode, please use the lower range of [1..255]<br>(0 is reserved for the VT's ESC key which is automatically being defined as <b>vtKeyCodeESC</b>).
<li> IMPORTANT: When using own IDs/KeyCodes, try not to interfere with the automatically generated numbers: Use Object-IDs greater than 256 for not interfering with Macros.
</ul>

\section XMLAttributes Important note on Attributes and Exchangeable SoftKey Elements
<ul>
<li> It is very important that you DO NOT use the same Attributes (Font, Line, ...) in Data/Alarm AND Softkey masks as different scalings have to be applied.<br>So I recommend for example to define a <b>FontAttributesDataAlarmMask6x8</b> and a <b>FontAttributesSoftkeyMask6x8</b> object.<br>
Take a look at the following example snippet:
\code
<!-- Attributes for Data-/Alarm-Masks -->
  <fontattributes name='FontAttrNormal6x8' font_colour='black' font_size='6x8' font_type='latin1' />
  <fontattributes name='FontAttrNormal8x8' font_colour='black' font_size='8x8' font_type='latin1' />
  <fontattributes name='FontAttrNormal12x16red' font_colour='red' font_size='12x16' font_type='latin1' />
  <lineattributes name='LineAttrNormal' line_colour='black' line_width='1' line_art='1111111111111111'/>
  <lineattributes name='LineAttrNormalDot' line_colour='black' line_width='1' line_art='1010101010101010'/>

<!-- Attributes for SoftKey-Masks -->
  <fontattributes name='FontAttrSKM6x8' font_colour='black' font_size='6x8' font_type='latin1' />
  <fontattributes name='FontAttrSKM8x8' font_colour='black' font_size='8x8' font_type='latin1' />
  <fontattributes name='FontAttrSKM12x16' font_colour='black' font_size='12x16' font_type='latin1' />
  <lineattributes name='LineAttrSKM' line_colour='black' line_width='1' line_art='1111111111111111'/>
\endcode
<li> You can't define exchangeable contents in a SoftKey (lets take an OutputString with "On" and one with "Off" for example), instead you'll have to do exchangeable SoftKeys. Objects not known where they'll be used in can't be auto-detected from the Auto-Scale function. Keep in mind that scaling of the SoftKeys may differ from scaling of the Data-/Alarm-Masks!<br>
Take a look at the following <b>WRONG</b> example snippet, keep in mind the outputstrings are defined directly in &lt;objectpool&gt; and not inside somewhere else, so there's no way they could be auto-detected (how should anybody know that switchOn/OffText should be scaled according to softkeys?):
\code
<outputstring name='switchOnText'  width='12' height='8' background_colour='white'
              font_attributes='FontAttributesSKM6x8' value='On'  horizontal_justification='left' />

<outputstring name='switchOffText' width='18' height='8' background_colour='white'
              font_attributes='FontAttributesSKM6x8' value='Off' horizontal_justification='left' />

<softkeymask name='SoftKeyMask1'>
  <key name='KeySwitch' background_colour='white'>
    <objectpointer name='switchPointer' pos_x='0' pos_y='0' value='switchOnText' />
  </key>
</softkeymask>
\endcode

Here's the <b>CORRECT</b> example snippet (not the texts are exchanged, but the whole softkeys - this way it's clear that switchOn/OffText are to be scaled for use in softkeys!):
\code
<key name='KeySwitchOn' background_colour='white'>
  <outputstring name='switchOnText'  pos_x='0' pos_y='0' width='12' height='8' background_colour='white'
                font_attributes='FontAttributesSKM6x8' value='On'  horizontal_justification='left' />
</key>
<key name='KeySwitchOff' background_colour='white'>
  <outputstring name='switchOffText' pos_x='0' pos_y='0' width='18' height='8' background_colour='white'
                font_attributes='FontAttributesSKM6x8' value='Off' horizontal_justification='left' />
</key>

<softkeymask name='SoftKeyMask1'>
  <objectpointer name='switchPointer' value='KeySwitchOn' />
</softkeymask>
\endcode
</ul>

\section XMLNesting Using objects: Allowed object nesting

There are two ways of using/referencing objects:
 - The "normal" way (as it reads in the ISO-Specification) : Using <include_object name='...'> to include/reference an object that was defined directly in the <objectpool> (i.e. nested in the <objectpool ...> tag!)
\code
<objectpool {attributes if first XML-file}>
  <outputstring name='MyOutputString1' value='foo' {more attributes} />
  <outputstring name='MyOutputString2' value='bar' {more attributes} />
  <!-- some other objects -->
  <button name='ButtonForSomething' {more attributes}>
    <include_object name='MyOutputString1' pos_x='...' pos_y='...'/>
    <include_object name='MyOutputString2' pos_x='...' pos_y='...'/>
    <!-- some more objects -->
  </button>
  <button name='ButtonForSomethingElse' {more attributes}>
    <include_object name='MyOutputString3' pos_x='...' pos_y='...'/> <!-- also possible !! ->
    <include_object name='MyOutputString1' pos_x='...' pos_y='...'/>
    <include_object name='MyOutputString2' pos_x='...' pos_y='...'/>
    <!-- some more objects -->
  </button>
</objectpool>
\endcode
 - The "simpler" way (mostly if it's only used once): Directly IN another object (when allowed, see the following table for reference), which also adds the object to the object pool and automatically includes a reference to it into the parent object. The example above could be written like the following (which will be converted to the snippet above at compile time!):
\code
<objectpool {attributes if first XML-file}>
  <!-- some other objects -->
  <button name='ButtonForSomething' {more attributes}>
    <outputstring name='MyOutputString1' value='foo' {more attributes} pos_x='...' pos_y='...'/>
    <outputstring name='MyOutputString2' value='bar' {more attributes} pos_x='...' pos_y='...'/>
    <!-- some more objects -->
  </button>
  <button name='ButtonForSomethingElse' {more attributes}>
    <include_object name='MyOutputString3' pos_x='...' pos_y='...'/> <!-- also possible !! ->
    <include_object name='MyOutputString1' pos_x='...' pos_y='...'/>
    <include_object name='MyOutputString2' pos_x='...' pos_y='...'/>
    <!-- some more objects -->
  </button>
</objectpool>
\endcode

Note that the <i> pos_x </i> and <i> pos_y </i> attributes are always associated with the parent object, hence in the first example the position is given in the outputstring objects and in the second example it (as it makes no sense specifying it in the outputstrings here) is given in the include_object reference (include_object and include_macro are no real own object but parts of the parent object!).
<p>
Now how does the <picturegraphic> object implementation work?<br>
Note that the "normal/standard" bitmaps will be searched in the "std_bitmap_path" and the fixed-size-bitmaps will be searched in the "fix_bitmap_path". Simply add these attributes in the &lt;objectpool&gt; element in your first XML file.
The attributes of <picturegraphic> mean:
<ul>
  <li> file='<filename>': default value for all bitmap-depths. Will simply set file='<filename>', file4='<filename>' and file8='<filename>' as default. This can be overridden by
  <li> file1='<filename1bit>': Filename for the 2-colored bitmap (will override value set by file='...' (if given)).
  <li> file4='<filename4bit>': Filename for the 16-colored bitmap (will override value set by file='...' (if given)).
  <li> file8='<filename8bit>': Filename for the 256-colored bitmap (will override value set by file='...' (if given)).
  <li> rle='<mode>': Try RLE-encoding for "1bit"-bitmaps, "4bit"-bitmaps or "8bit"-bitmaps. If set to "auto" it will try to RLE-encode every bitmap generated.
  <li> format='...': The given bitmap should be treated as a 1bit/4bit/8bit-bitmap. This means for:
        <ul>
          <li> 1bit: Only a 2-colored version is generated.
          <li> 4bit: Also a 2-colored version is generated, but also a 16-colored version.
          <li> 8bit: Also a 2-colored version is generated, a 16-colored version is generated if file='...' or file4='...' is specified. In case you don't want the 16-colored version to be generated, set file4='' (On a 16-color VT the 2-colored bitmap is used then!).
        </ul>
</ul>
You can nest any count of <fixedbitmap> elements into the <picturegraphic> element. Let's assume you specified a bitmap with width="30" (and height also 30) in an objectpool of 200x200. On a VT with a dimension of 240x240 that would make a size of 36x36. If you have such a VT that does not support scaling, you can specify a to-36x36-pre-scaled version of that bitmap in such a <fixedbitmap> element. <br>
Let's take a look at the following snippet:
\code
  <picturegraphic name='BigLogo' width='100' transparency_colour='white' options='transparent+flashing' 
                 format='8bit' rle='auto' file='simpleBitmap.bmp' file4='' >
    <fixedbitmap format='4bit' rle='auto' file='simpleBitmap240.bmp' file1='' />
  </picturegraphic>
\endcode
As default bitmaps (that work on standard VTs with scaling) the following will be generated (no 16-color bitmap is generated as it's disabled by file4=''):
<ul>
  <li> 2-color bitmap from "simpleBitmap.bmp" RLE-encoded (if RLE-encoded size is shorter than normal RAW-size)
  <li> 256-color bitmap from "simpleBitmap.bmp" RLE-encoded (if RLE-encoded size is shorter than normal RAW-size)
</ul>
As special bitmaps with a fixed size (regardless to scaling) there will be generated (no 2-color bitmap is generated as it's disabled by file1=''):
<ul>
  <li> 16-color bitmap from "simpleBitmap240.bmp" RLE-encoded (if RLE-encoded size is shorter than normal RAW-size) with the fixed size of that bitmap-file.
</ul>
When uploading the pool it will be first searched through the fixed bitmaps if one of those match the scaled width="..." attribute. If none does, the standard bitmap is uploaded in the apropriate color-depth.

The following table shows which objects may be included into which other.
<table>
<tr><th>  Name of XML-Tag </th> <th> Allows inclusion of objects of following types
</th></tr><tr><td>    workingset    </td> <td> Macro | Outputfield | Outputshape | Picturegraphic </td>
</td></tr><tr><td>    datamask       </td><td> Macro | Outputfield | Inputfield | Outputgraphic | Outputshape | Picturegraphic | Button | Container | Objectpointer
</td></tr><tr><td>    alarmmask      </td><td> Macro | Outputfield | Outputgraphic | Outputshape | Picturegraphic | Container | Objectpointer
</td></tr><tr><td>    container      </td><td> same types only as allowed in the object that included the container
</td></tr><tr><td>    softkeymask    </td><td> Macro | Key | Objectpointer
</td></tr><tr><td>    key            </td><td> Macro | Outputfield | Outputshape | Picturegraphic | Container | Objectpointer
</td></tr><tr><td>    button         </td><td> Macro | Outputfield | Outputshape | Picturegraphic | Container | Objectpointer
</td></tr><tr><td>    inputboolean   </td><td> Macro
</td></tr><tr><td>    inputstring    </td><td> Macro
</td></tr><tr><td>    inputnumber    </td><td> Macro
</td></tr><tr><td>    inputlist      </td><td> Macro | Outputfield | Picturegraphic
</td></tr><tr><td>    outputstring   </td><td> Macro
</td></tr><tr><td>    outputnumber   </td><td> Macro
</td></tr><tr><td>    line           </td><td> Macro
</td></tr><tr><td>    rectangle      </td><td> Macro
</td></tr><tr><td>    ellipse        </td><td> Macro
</td></tr><tr><td>    polygon        </td><td> Macro | Point
</td></tr><tr><td>    meter          </td><td> Macro
</td></tr><tr><td>    linearbar      </td><td> Macro
</td></tr><tr><td>    archedbar      </td><td> Macro
</td></tr><tr><td>    picturegraphic </td><td> Macro | FixedBitmap
</td></tr><tr><td>    numbervariable </td><td> none
</td></tr><tr><td>    stringvariable </td><td> none
</td></tr><tr><td>    fontattributes </td><td> Macro
</td></tr><tr><td>    lineattributes </td><td> Macro
</td></tr><tr><td>    fillattributes </td><td> Macro
</td></tr><tr><td>    inputattributes</td><td> Macro
</td></tr><tr><td>    objectpointer  </td><td> none
</td></tr><tr><td>    macro          </td><td> none
</td></tr><tr><td>    auxfunction    </td><td> Outputfield | Outputshape | Picturegraphic, // really NONE
</td></tr><tr><td>    auxinput       </td><td> Outputfield | Outputshape | Picturegraphic, // really NONE
</td></tr><tr><td>    objectpool     </td><td> all
</td></tr><tr><td>    include_object </td><td> none
</td></tr><tr><td>    include_macro  </td><td> none
</td></tr><tr><td>    point          </td><td> none
</td></tr><tr><td>    language       </td><td> none
</td></tr></table>

\section XMLReference Reference for correct attribute names
<table><tr><th> Attribute-Name </th><th> Attribute-Type</th></tr>
<tr><td>background_colour</td><td> \ref XMLColour "Colour"</td></tr>
<tr><td>selectable</td><td> \ref XMLTruth "Truth"</td></tr>
<tr><td>active_mask</td><td> Datamask </td></tr>
<tr><td>soft_key_mask</td><td> Softkeymask </td></tr>
<tr><td>priority</td><td> \ref priority "Priority" or directly 0..2 </td></tr>
<tr><td>acoustic_signal</td><td> \ref acousticsignal "AcousticSignal" or directly 0..3 </td></tr>
<tr><td>width</td><td> Integer </td></tr>
<tr><td>height</td><td> Integer </td></tr>
<tr><td>hidden</td><td> \ref XMLTruth "Truth" </td></tr>
<tr><td>key_code</td><td> Integer ranging 1..255</td></tr>
<tr><td>border_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>latchable</td><td> \ref XMLTruth "Truth" </td></tr>
<tr><td>foreground_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>variable_reference</td><td> Any variable </td></tr>
<tr><td>value</td><td> Depending on the type of object </td></tr>
<tr><td>font_attributes</td><td> FontAttributes object</td></tr>
<tr><td>input_attributes</td><td> InputAttributes object</td></tr>
<tr><td>options</td><td> Depending on the type of object; combinable using "+"</td></tr>
<tr><td>horizontal_justification</td><td> \ref horizontaljustification "Horizontal Justification"</td></tr>
<tr><td>length</td><td> Integer </td></tr>
<tr><td>min_value</td><td> Integer </td></tr>
<tr><td>max_value</td><td> Integer </td></tr>
<tr><td>offset</td><td> Integer </td></tr>
<tr><td>scale</td><td> Float</td></tr>
<tr><td>number_of_decimals</td><td> Integer </td></tr>
<tr><td>format</td><td> \ref format "Format"</td></tr>
<tr><td>line_attributes</td><td> LineAttribute object </td></tr>
<tr><td>line_suppression</td><td> 4bit Bitmask, not yet implemented</td></tr>
<tr><td>fill_attributes</td><td> FillAttribute object </td></tr>
<tr><td>ellipse_type</td><td> Integer ranging 0..3, not yet implemented</td></tr>
<tr><td>start_angle</td><td> Integer, not yet implemented</td></tr>
<tr><td>end_angle</td><td> Integer, not yet implemented</td></tr>
<tr><td>polygon_type</td><td> Integer ranging 0..3, not yet implemented</td></tr>
<tr><td>needle_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>border_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>arc_and_tick_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>number_of_ticks</td><td> Integer </td></tr>
<tr><td>colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>target_line_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>target_value_variable_reference</td><td> IntegerVariable object</td></tr>
<tr><td>target_value</td><td> Integer </td></tr>
<tr><td>bar_graph_width</td><td> Integer </td></tr>
<tr><td>actual_width</td><td> Integer </td></tr>
<tr><td>actual_height</td><td> Integer </td></tr>
<tr><td>transparency_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>font_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>font_size</td><td> \ref fontsize "FontSize"</td></tr>
<tr><td>font_type</td><td> \ref fonttype "FontType"</td></tr>
<tr><td>font_style</td><td> \ref fontstyle "FontStyle"</td></tr>
<tr><td>line_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>line_width</td><td> Integer </td></tr>
<tr><td>line_art</td><td> 16bit Bitpattern </td></tr>
<tr><td>fill_type</td><td> Integer ranging 0..3, not yet implemented</td></tr>
<tr><td>fill_colour</td><td> \ref XMLColour "Colour" </td></tr>
<tr><td>fill_pattern</td><td> PictureGraphic object </td></tr>
<tr><td>validation_type</td><td> Integer ranging 0..1, not yet implemented</td></tr>
<tr><td>validation_string</td><td> String, not yet implemented</td></tr>
<tr><td>pos_x</td><td> Integer </td></tr>
<tr><td>pos_y</td><td> Integer </td></tr>
<tr><td>event</td><td> Event object, not yet implemented</td></tr>
<tr><td>file</td><td> Bitmap-Filename to use for all colour-depths</td></tr>
<tr><td>file1</td><td> Bitmap-Filename to use for 2-colour-Bitmap generation</td></tr>
<tr><td>file4</td><td> Bitmap-Filename to use for 16-colour-Bitmap generation </td></tr>
<tr><td>file8</td><td> Bitmap-Filename to use for 256-colour-Bitmap generation</td></tr>
<tr><td>line_direction</td><td> \ref linedirection "LineDirection" </td></tr>
<tr><td>enabled</td><td> \ref XMLTruth "Truth" </td></tr>
<tr><td>block_font</td><td> FontAttributes object</td></tr>
<tr><td>block_row</td><td> Integer </td></tr>
<tr><td>block_col</td><td> Integer </td></tr>
<tr><td>number_of_items</td><td> Integer </td></tr>
<tr><td>number_of_points</td><td> Integer </td></tr>
<tr><td>number_of_bytes</td><td> Integer </td></tr>
<tr><td>object_id</td><td> ID of an object (to be changed so it works with name, too)</td></tr>
</table>
...more to come!

\section XMLColour Colours
If you want to specify a colour, the attribute value is an index in the range of decimal 0..255 (see the ISO 11783 Colour Table). Alternatively you can use one of the following 16 colour constants:<p>
<table><tr><th colspan=4> Name of colours </th></tr>
<tr><td>(00) black</td>
<td>(01) white</td>
<td>(02) green</td>
<td>(03) teal</td></tr>
<tr><td>(04) maroon</td>
<td>(05) purple</td>
<td>(06) olive</td>
<td>(07) silver</td></tr>
<tr><td>(08) grey</td>
<td>(09) blue</td>
<td>(10)lime</td>
<td>(11) cyan</td></tr>
<tr><td>(12) red</td>
<td>(13) magenta</td>
<td>(14) yellow</td>
<td>(15) navy</td>
</table>

\section XMLSpecialAttrVal List of special attribute values
<table> <tr><th> Tag  </th><th> Attribute </th><th> Possible values </th>
<tr><td> fontattributes </td><td> \anchor fontsize font_size </td> <td> '6x8'<br>
                                                 '8x8'<br>
                                                 '8x12'<br>
                                                 '12x16'<br>
                                                 '16x16'<br>
                                                 '16x24'<br>
                                                 '24x32'<br>
                                                 '32x32'<br>
                                                 '32x48'<br>
                                                 '48x64'<br>
                                                 '64x64'<br>
                                                 '64x96'<br>
                                                 '96x128'<br>
                                                 '128x128'<br>
                                                 '128x192'</td></tr>
<tr><td> &nbsp;</td> <td> \anchor fonttype font_style </td> <td> '0' or 'latin1'<br>
                                                 '1' or 'latin9'<br>
                                                 '255' or 'proprietary'</td></tr>
<tr><td> &nbsp;</td> <td> \anchor fontstyle font_style </td> <td> 'bold'<br>
                                                 'crossed'<br>
                                                 'underlined'<br>
                                                 'italic'<br>
                                                 'inverted'<br>
                                                 'flashinginverted'<br>
                                                 'flashinghidden'</td></tr>
<tr><td> in/outputnumber </td><td> \anchor format format </td><td> 'fixed'<br>
                                                 'exponential'</td></tr>
<tr><td> in/output* </td><td> \anchor horizontaljustification horizontal_justification </td><td> 'left'<br>
                                                 'middle'<br>
                                                 'right'</td></tr>
<tr><td> picturegraphic </td><td> options </td><td> 'transparent'<br>
                                                 'flashing'<br>

<tr><td> picturegraphic/fixedbitmap </td><td> rle </td><td>  '1bit' for compression of 1 bit black/white<br>
                                                             '4bit' for compression of 4 bit 16 colours<br>
                                                             '8bit' for compression of 8 bit 216 colours<br>
                                                             'auto'</td></tr>

<tr><td> picturegraphic/fixedbitmap </td><td> file </td><td> standard filename for all color-depths (auto-color reduction!)</td></tr>
<tr><td> </td>                          <td> file1 </td><td> filename for 1-bit color-depth (2 colors), overrides standard  'file'</td></tr>
<tr><td> </td>                          <td> file4 </td><td> filename for 4-bit color-depth (16 colors), overrides standard 'file'</td></tr>
<tr><td> </td>                          <td> file8 </td><td> filename for 8-bit color-depth (256 colors), overrides standard 'file'</td></tr>

<tr><td> picturegraphic/fixedbitmap </td><td> format </td><td> '1bit' for 1 bit black/white<br>
                                                               '4bit' for 4 bit 16 colours<br>
                                                               '8bit' for 8 bit 216 colours<br></td></tr>

<tr><td> line </td><td> \anchor linedirection line_direction </td><td> 'toplefttobottomright' (default) <br>
                                                 'bottomlefttotopright'</td></tr>

<tr><td> rectangle </td><td> line_suppression </td> <td> 'top'<br>
                                                 'right'<br>
                                                 'bottom'<br>
                                                 'left'</td></tr>

<tr><td> ellipse </td><td> ellipse_type </td> <td> 'closed'<br>
                                                 'open'<br>
                                                 'closedsegment'<br>
                                                 'closedsection'</td></tr>

<tr><td> polygon </td><td> polygon_type </td> <td> 'convex'<br>
                                                 'nonconvex'<br>
                                                 'complex'<br>
                                                 'open'</td></tr>

<tr><td> meter </td><td> options </td> <td> 'arc'<br>
                                                 'border'<br>
                                                 'ticks'<br>
                                                 'clockwise'</td></tr>


<tr><td> linearbargraph </td><td> options </td><td> 'border'<br>
                                                 'targetline'<br>
                                                 'ticks'<br>
                                                 'nofill'<br>
                                                 'horizontal'<br>
                                                 'growpositive'</td></tr>

<tr><td> archedbargraph </td><td> options </td><td> 'border'<br>
                                                 'targetline'<br>
                                                 'nofill'<br>
                                                 'clockwise'</td></tr>

<tr><td> fillattributes </td><td> fill_type </td> <td> 'nofill'<br>
                                                 'linecolour'<br>
                                                 'fillcolour'<br>
                                                 'pattern'</td></tr>

<tr><td> inputattributes </td><td> validation_type </td> <td> 'validcharacters'<br>
                                                 'invalidcharacters'</td></tr>

<tr><td> alarmmask </td><td> \anchor acousticsignal acoustic_signal </td><td> 'high'<br>
                                                 'medium'<br>
                                                 'low'<br>
                                                 'none'</td></tr>
<tr><td>&nbsp;</td><td> \anchor priority priority </td><td> 'high'<br>
                                                 'medium'<br>
                                                 'low'</td></tr>
<tr><td> outputstring </td><td> options </td><td> 'transparent'<br>
                                                 'autowrap'</td></tr>
<tr><td> outputnumber </td><td> options </td><td> 'transparent'<br>
                                                 'leadingzeros'<br>
                                                 'blankzero'</td></tr>
</table>

\section XMLTruth Truth-Values
<table>
<tr><th> Yes/True/On </th><th> No/False/Off </th></tr>
<tr><td> 'yes' </td><td> 'no' </td></tr>
<tr><td> 'true' </td><td> 'false' </td></tr>
<tr><td> 'on' </td><td> 'off' </td></tr>
<tr><td> 'show' </td><td> 'hide' </td></tr>
<tr><td> 'enable' </td><td> 'disable </td></tr>
</table>

*/
