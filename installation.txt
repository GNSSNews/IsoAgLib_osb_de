/*! \page PageInstallation Download & Installation of IsoAgLib

INCLUDE_doc/txt/mainHeaderWithNavbar.txt_INCLUDE

<table class="infobox" border="0">
<tr><th>Section Overview</th></tr>
<tr><td>The following parts are described in this section:
<ol>
<li> \ref PageDownloadAndInstall "Download"
    <ul><li>\ref HowtoDownload
    </li><li>\ref HowtoAccessRepository
    </li></ul>
</li>
<li> \ref Installation
    <ul><li>\ref HowtoSetupCompilerTools
    </li><li>\ref InstallIsoToolVt2Iso
    </li><li>\ref HowtoCreateProjectFiles
    </li></ul>
</li>
</ol>
</td></tr>
</table>


\section HowtoSetupCompilerTools Preparing Compiler and IDE

The ISO<i><sub>AgLib</sub></i> requires standard conformant C++ compilers with a
conformant implementation of the <b>S</b>tandard <b>T</b>emplate <b>L</b>ibrary ( STL ).
As at least the Microsoft Visual Studion of version 6 doesn't provide either, you have at least to
download the conformant STL version from http://www.stlport.org ( Important: Don't use the iostream version
of STLport with Visual Studio, as there are some problems ).<br>


\subsection CompKdevelop3 KDevelop3 for LINUX

The usage of ISO<i><sub>AgLib</sub></i> is quite easy with LINUX. As this platform is used by <a href="mailto:Achim.Spangler@osb-ag:de">Achim Spangler</a>,
a first hand support is possible. The fine IDE named kdevelop ( see http://www.kdevelop.org ) provides
code completion, class browser, integrated debugger and several features more.
There are some basic kdevelop3 projects in compiler_projects/kdevelop_tmake/IsoAgLib . In case of problems,
<a href="mailto:Achim.Spangler@osb-ag:de">Achim Spangler</a> can help with some more examples.<br>
The project files which can be created by a helper tool of the ISO<i><sub>AgLib</sub></i> can be very easily
compiled with standard GNUmake ( Important: This requires the existance of qmake of the Qt framework - this is available as
simple installable binary for all known LINUX distributions ).

\subsection CompDevVc6 Microsoft Visual Studio 6
The automatic project file generating script can write DSP project files, which can be directly used to create an EXEcuteable
program with Vector-Informatik CAN card support ( or other CAN cards ). As newer versions of VC++ can also import DSP project files,
no special support is provided.<br>

\subsubsection Vc6StlPort Installation of STLport - Open Source ANSI C++ compatible STL
<b>Important:</b>
The VC++ version 6 has no ANSI C++ compatible version of the <b>S</b>tandard <b>T</b>emplate <b>L</b>ibrary ( STL ) on board, so that
the STLport must be installed and used for ISO<i><sub>AgLib</sub></i>.<br>

The <a href="http://www.stlport.org/">STLport</a> is meanwhile a very well known and accepted implementation of the STL standard.
It is used by commercial IDEs like Borland C++ Builder 6 and Tasking EDE ( since version 8.0 ).

Installation Steps:
-# Download STLport from http://www.stlport.org/archive/STLport-4.6.2.tar.gz ( other versions at http://www.stlport.org/download.html )
-# extract to location like <i>C:\\</i> ( or use other directory - then change the following examples according to your individual path )
-# <b>rename directory C:\\STLport-4.6.2 to C:\\STLport , so that the scripts and automatically created paths needn't be adapted to new versions of STLport</b>
-# Configure and install STLport
	- with native IOSTREAMS of VC6 ( <b>recommended</b> ):<br>
		- simply uncomment the #define _STLP_NO_OWN_IOSTREAMS in the config header C:\\STLport\\stlport\\stl_user_config.h
		- edit C:\\Program Files\\Microsoft Visual Studio\\VC98\\Bin\\vcvars32.bat
			- FROM: set INCLUDE=%MSVCDir%\\ATL\\INCLUDE; %MSVCDir%\\INCLUDE;%MSVCDir%\\MFC\\INCLUDE;%INCLUDE%
			- TO:   set INCLUDE=C:\\STLport\\stlport;%MSVCDir%\\ATL\\INCLUDE; %MSVCDir%\\INCLUDE;%MSVCDir%\\MFC\\INCLUDE;\\%INCLUDE%
		- add C:\\STLport\\stlport <b>in FRONT of the include path of your projects - this is already done for automatically created DSP files</b>
		- you are finshed! ( no compile or install of sources needed )
	- with IOSTREAMS version of STLport:<br>
		use installation overview from http://doc.ece.uci.edu/~mlai/notes/stlport_in_vc.html
		( the BAT vcvars32.bat is not located at C:\\Program Files\\Microsoft Visual Studio\\VC98 but in C:\\Program Files\\Microsoft Visual Studio\\VC98\\Bin )
-# look at STLport own documentation from local installation file://C:/STLport/doc/install.html and file://C:/STLport/doc/select_io.html for further information
-# make shure that you adapt the feature setup files to reflect a differing path to your STLport installation ( C:\\STLport is default setting )


\subsection CompDevCpp Dev-C++ for Win32

<b>Important NEWS!!!:</b>
<i>
Newer Versions of Vector-Informatik CAN cards can be used with Dev-C++ generated Windows EXE programs (at least Vector-Informatik engineers
reported to have incorporated several Dev-C++ examples into their newest driver package). So please check out for a new driver
version, when you want to use Dev-C++ with Vector-Informatik CAN cards. Please ask the Vector-Informatik, in case you don't get
their tutorial programs to run with Dev-C++.
</i><br>



As <a href="mailto:Achim.Spangler@osb-ag:de">Achim Spangler</a> had several issues with MS Visual Studio, and the STL version of the standard <b>gcc</b> compiler
is quite good, <a href="mailto:Achim.Spangler@osb-ag:de">Achim Spangler</a> decided to maintain mainly the free IDE "Dev-C++" ( http://www.bloodshed.net/dev/devcpp.html )
for Win32 platforms.
This IDE has some important features:<ul>
<li>simple install
<li>automatic update within the extras menu
<li>download of extension modules within easy to handle download and install dialog window
	( <b>important</b>: the tools for <b>vt2iso</b> compilation: <i>xerces</i> and the image manipulation libraries <i>FreeImage</i> and <i>ImLib</i> can be
	  downloaded and installed this way )
<li>project file format is a clean ASCII, so that the project generation script can
    directly create a running project for Dev-C++
</ul>

\subsubsection InstallDevCpp Installation of Dev-C++
<ol>
<li>Please download at least the version 4.9.9.0 from http://www.bloodshed.net/dev/devcpp.html
<li>Check for updates with Dev-C++ menu entry TOOLS->CHECK FOR UPDATES
<li>Select the mirror "PlanetMirror.com" from the list ( at least the german version has a dead
	default mirror entry in the list ) in the dialog window "WebUpdate"
<li>Click on button "Check for updates" in the dialog window "WebUpdate"
<li>Select at least the following packages for download ( as they are needed for <b>vt2iso</b> )<ul>
	<li>FreeImage.DevPak
	<li>ImageLib.DevPak
	<li>xerces-c_2_5_0-mingw.DevPak ( see for special download instructions at \ref Win32Xerces )
	<li>( optionally further documentation or utility packages )
	</ul>
</ol>


\subsection CompTasking Tasking for Embedded Targets

The Tasking Compiler of version >= 7.56 is handling C++ in a sufficient manner and provides
a conformant STL ( important: the STL version 8.0 consumed too much memory - try one of the newer versions, as Tasking
introduced some compiler switches to avoid code bloat by STLport - just ask Tasking for the 7.56 STL version, if the ROM overhead
is still too big; the overhead was caused by the change from
and adapted SGI STL to the STLport system; while SGI STL uses templates only, the STLport defines several STL functions
as functions which can be compiled to a linkeable library; this approach is fine, as long as the target linker is able
to select just the needed functions from the STLport libraries; at least Tasking Compiler Version 8.0 included a lot too much
object code into the firmware, so that the overhead was not acceptible ).

ISO<i><sub>AgLib</sub></i> also provides some project files for the tutorials which can be used by the
Tasking compiler.

\subsubsection TaskingHeapsize Set Heapsize in Linker/Locator Specification ( ILO file )
The ISO<i><sub>AgLib</sub></i> stores some information in dynamic lists, so that you need some HEAP memory.
Please start with a great HEAPSIZE setting in the linker/locator specification ( see HEAPSIZE control in ILO file ), and
check the RS232 output, when you compile the project with the #define DEBUG_HEAP_USEAGE .

\subsubsection TaskingCanRs232Buffer Allocate enough buffer for CAN receive buffer queues and RS232 buffer
Some OS/BIOS which are designed like <a href="http://www.sensor-technik.de">STW BIOS</a> have a special setting to
allocate enough memory for the internal managed buffers for RS232 and CAN. The amount of items which are reserved by
ISO<i><sub>AgLib</sub></i> in isoaglib_config.h #define CONFIG_CAN_STD_LOAD_REC_BUF_SIZE_MIN and CONFIG_RS232_DEFAULT_SND_PUF_SIZE ( this can be overridden by
configuration call with iRS232IO_c::setSndPufferSize and iRS232IO_c::setRecPufferSize ).<br>
- Again - set the value ( in case of <a href="http://www.sensor-technik.de">STW BIOS</a> set variable BUFFER_SIZE in file "Xos20go.asm" ) to MAX or other great enough value for a start.
- Then compile your project with DEBUG_CAN_BUFFER_FILLING ( activate it in the feature setup file of your project )
- Check the RS232 output for fill grade of CAN buffers ( the MAX amount of buffered CAN messages per BUS is printed )
- Calculate the needed memory for RS232 ( corresponds to CONFIG_RS232_DEFAULT_SND_PUF_SIZE or the overridden value ) and CAN ( corresponds to the MAX output from step above )
- Adapt the buffer size value ( leave some additional space )


\section HowtoCreateProjectFiles Creating Project Files with update_makefile.sh

Caused by the huge amount of optional features in the ISO<i><sub>AgLib</sub></i> , the manual
selection of needed project files can get quite complicated.
The script compiler_projects/projectGeneration/update_makefile.sh can create project files and
project specific configuration headers for all projects. The feature setup is feed to this script
by configuration files with a very simple syntax. Please have a look at the comments inside the several
conf_* files in the directory compiler_projects/projectGeneration/ .
Call the script like this:<ul>
<li>cd compiler_projects/projectGeneration
<li>update_makefile.sh conf_0_0_AddressClaimIso
</ul>


\subsection UseMSYS Running script on Win32 using MSYS
As scripts can only be natively executed in UNIX or LINUX, the tool MSYS ( http://www.mingw.org )
is needed as a minimal POSIX layer to call bash scripts within Win32.
This project is simply to install. You don't need the other tools from this website, as the
MinGW compiler is also integrated into the Dev-C++ tool.


\subsection ScriptIntegrateWin32Can Integration of Win32 CAN card drivers
The IsoAgLib provides at the moment an integration with the CAN drivers from Vector Informatik and Sontheim.
Both Vector Informatik driver types <b>CANLIB</b> and <b>XL Driver Library</b> are supported by the source modules
<b>target_extension_can_w32_vector_canlib.cpp</b> and <b>target_extension_can_w32_vector_xl_drv_lib.cpp</b> .
Both modules support the usage of a thread based CAN receive, which can be activated by the
setting of the #define USE_THREAD ( if it's undef -> no threading is used ).<br>
<b>Important:<br>
You can use one of the XL CAN cards with the <b>CANLIB</b> driver API. You can also use the <b>XL Driver Library</b>
for some of the older CAN cards ( please look at the Vector-Informatik website for details ).<br>
Therefore you have really to select "vector_canlib" for USE_CAN_DRIVER, if the SETUP.EXE of your driver
extracted the files to a subdirectory <b>CANLIB</b> - as you have obviously installed the CANLIB.<br>
Some users were already irritated by this difference, so that they weren't able to build the tutorial examples. So this is not
just a theoretic problem.<br>
</b>
The integration of ISO<i><sub>AgLib</sub></i> and Vector CAN drivers runs as follows:<ol>
<li>Download either the current <b>CANLIB</b> or <b>XL Driver Library</b> driver
<li>Install the driver with the <i>SETUP.EXE</i> to the directory <i>C:\\Development\\CANLIB</i> ( <b>don't rename the contained
		root directories <i>CANLIB</i> resp. <i>XL Driver Library</i> as the ISO<i><sub>AgLib</sub></i>
		uses them </b> ; you can install to another location - but then you have to adapt the conf_* feature setup files
		to your individual path before you execute the update_makefile.sh )
<li>Set the project configuration file conf_* ( e.g. conf_0_0_AddressClaimIso ) as follows:<ol>
	<li>set the variables <i>USE_WIN32_HEADER_DIRECTORY</i> and <i>USE_WIN32_LIB_DIRECTORY</i> to your
			installation root ( <b>don't include the directory name part <i>CANLIB</i> resp. <i>XL Driver Library</i> </b> ) <br>
			Example: <ul>
			<li>You selected "C:/Development" during the execution of <i>SETUP.EXE</i>.
			<li><i>SETUP.EXE</i> placed everything in the directory <i>C:/Development/CANLIB</i>
					resp. <i>C:/Development/XL Driver Library</i>
			<li>Set <b>both above mentioned variables USE_WIN32_HEADER_DIRECTORY AND USE_WIN32_LIB_DIRECTORY</b> to <i>"C:/Development"</i>
			</ul>
	<li>set the variable USE_CAN_DRIVER to either "vector_canlib" or "vector_xl_drv_lib"
	<li>select the CAN card type variable USE_WIN32_CAN_HW_TYPE to HWTYPE_VIRTUAL, HWTYPE_CANCARDX,
			HWTYPE_CANAC2, HWTYPE_CANAC2PCI, HWTYPE_CANCARDXL, HWTYPE_CANCARD2 ..... ( look at driver manual )
	<li>Set the target platform USE_TARGET_SYSTEM vaiable to pc_win32
	</ol>
<li>select in the driver library specific source file the wanted thread or not thread state
<li>let update_makefile.sh create a project file for Visual Studio VC6 and above
<li>build the project with Visual Studio VC6 and above
<li>install the .dll of the used CAN driver library ( file from Vector Informatik ) into the
		DLL-Search-Path of your system ( or into the directory of your resulting EXE )
</ol>

The integration of the Sontheim CAN card driver target_extension_can_w32_sontheim_canlpt.cpp is comparable to the Vector Informatik case. But here, Sontheim placed
the API simply into a ZIP file which doesn't define a folder and doesn't provide a SETUP.EXE. Thus you should manually place the ZIP contents
to the path <b><i>C:\\Development\\Sontheim</i></b> , if you want to use the provided tutorial example project files without the need to call update_makefile.sh
for creation of adapted project files.

This strategy can be mapped to other Win32 or LINUX CAN cards as well. Please contact the
<a href="mailto:Achim.Spangler@osb-ag:de">Achim Spangler</a> for help on adaptation and please
send a running adaptation back to the project.


\subsection ScriptOptions Command Line Options for update_makefile.sh
The script update_makefile.sh provides several command line options which enables the
individual overwrite of target specific project settings. Thus you can use a project config
file, which reflects for example a pc_linux platform, to get a project file for pc_win32
( Dev-C++ and Visual Studio VC6 DSP project file ).
The following parameters are available ( you can get this list by calling the script with
"./update_makefile.sh --help" ).
\code
Usage: ./update_makefile.sh [OPTION] project_config_file
Create filelist, Makefile and configuration settings for a IsoAgLib project.

  -h, --help                        print this message and exit.
  --doxygen-export-directory=DIR    write the filelist and configuration files with doxygen documentation
                                    blocks to the given directory instead of the default directory of all generated files.
  --IsoAgLib-root=DIR               use the given root directory instead of the entry in the selected configuration file.
  --target-system=TARGET            produce the project definition files for the selected TARGET instead of the
                                    target which is specified in the configuration file
                                    ( "pc_linux"|"pc_win32"|"esx"|"c2c"|"imi"|"pm167"|"mitron167" ).
  --pc-can-driver=CAN_DRIVER        produce the project definition files for the selected CAN_DRIVER if the project shall run on PC
                                    ( "simulating"|"sys"|"rte"|"linux_server_client"|"vector_canlib"|"vector_xl_drv_lib"|"sontheim" ).
  --pc-rs232-driver=RS232_DRIVER    produce the project definition files for the selected RS232_DRIVER if the project shall run on PC
                                    ( "simulating"|"sys"|"rte" ).
  --little-endian-cpu               select configuration for LITTLE ENDIAN CPU type
  --big-endian-cpu                  select configuration for BIG ENDIAN CPU type

./compiler_projects/projectGeneration/update_makefile.sh parses the selected project configuration file and overwrites the default values for all contained settings.
It collects then the corresponding files which can then be imported to an individual IDE.
Additionally a project specific configuration header is created in the directory xgpl_src/IsoAgLib with the
name scheme ".config_<project_name>.h". If the #define PRJ_USE_AUTOGEN_CONFIG is set to ".config_<project_name>.h",
the central configuration header xgpl_src/IsoAgLib/isoaglib_config.h will include this header.
Please set additionally the SYSTEM_FOO for the wanted platform - ./compiler_projects/projectGeneration/update_makefile.sh will output the correct define at the end of the
run.
Thus with these two DEFINE settings, the compiler can generate a clean running executable / HEX.

Report bugs to <Achim.Spangler@osb-ag:de>.

\endcode

The script parses the given project feature set selection and configuring file and<ol>
<li>selects all needed project file ( thus you don't have do manually select the neded files,
	a big part of the files can be excluded for simple projects )
<li>generate a project specific configuration header, which is placed in the directory
	"xgpl_src/IsoAgLib/" ( you can trigger the compiler to include it by simply
	setting the compile time DEFINE PRJ_USE_AUTOGEN_CONFIG to ".config_<project_name>.h"
<li>create suitable project files for the following build systems:<ul>
	<li>LINUX: make in the directory "compiler_projects/kdevelop_qmake/"
	<li>Win32: Dev-C++ in the directory "compiler_projects/Dev-C++/"
	<li>Win32: Visual Studio VC6 in the directory "compiler_projects/VC6/"
	<li>Win32 for Embedded: Tasking EDE in the directory "compiler_projects/EDE/"
	</ul>
<li>tells you which DEFINES must be set for compile, if none of the automatically created project files will be used.
</ol>

\subsection FeatureSetupFile Contents of Feature Setup File

The features and the corresponding source modules and configuration defines can be specified by configuration variables
in feature setup files. The variables can be grouped to several specification tasks.

The specification files for the tutorial examples list all configuration variables, even if just their
default value is used. The default state is OFF ( value 0 ) for most variables. You don't have to write
the default values in the specification of your own project.

\subsubsection ConfProjectIdent Project Identification

The project can be identified by:
	- <b>PROJECT</b> project name, which is used for the project file and project directory
	- <b>PROJECT_AUTHOR</b> author name, which is inserted into project file ( where this value is defined )
	- <b>PROJECT_AUTHOR_EMAIL</b> author email address, which is also inserted into project file ( where this value is defined )

\subsubsection ConfApplicationFiles Selection of Application Sources

The update_makefile.sh script can collect your individual source files into the project file of the wanted IDE.
This can be achived by the following settings.
	- <b>REL_APP_PATH</b> path in relation to IsoAgLib base directory to base directory of all application sources
			( use "../" to navigate to parent directory; use UNIX style directory separator "/"  )
	- selection of source files in two alternative ways:
		-# <b>APP_SRC_FILE</b> list single files seperated by whitespace
		-# Use search expression which can be defined with:
			- <b>APP_SEARCH_SRC_CONDITION</b> file extensions to select as source module ( default is "*.cc *.c *.cpp" )
			- <b>APP_SEARCH_HDR_CONDITION</b> file extensions to select as header ( default is "*.h *.hpp" )
			- <b>APP_PATH_EXLCUDE</b> paths to exclude from search - you can use joker "*" to simply define only part of the to be excluded path
			- <b>APP_SRC_EXCLUDE</b> files to exclude from search - you can use joker "*" to exclude all files which match to a specific pattern ( e.g. "test*.cpp" )

\subsubsection ConfBaseSetting Basic Project Settings
The following basic settings can be specified independent from hardware and feature setup:
	- <b>ISO_AG_LIB_PATH</b> relative path from directory where the feature setup file is located to the root directory of IsoAgLib ( "../.." for the tutorial examples )
	- <b>PRJ_DEFINES</b> individual #defines which are integrated into the project file - some examples for special debug purposes:
		- <i>DEBUG_CAN_BUFFER_FILLING</i> for RS232 output of MAX amount of buffered CAN messages
		                                  ( important to decide on amount of items in the BIOS/OS CAN receive buffer )
		- <i>DEBUG_HEAP_USEAGE</i> for RS232 output of amount of bytes which are needed of one
		                           item in the different types of dynamic lists: IsoAgLib::MsgObj_c , IsoAgLib::FilterBox_c , IsoAgLib::IsoItem_c ,
		                           IsoAgLib::MeasureSubprog_c , SetpointRegister ;
		                           additionally print calculated amount of HEAP memory which is used by the several types of
		                           dynamic lists ( output on each list change )
	- <b>PRJ_SEND_DEBUG</b> activate several IsoAgLib internal debugging on RS232
	- <b>USE_FLOAT_DATA_TYPE</b> activate useage of float variable type ( avoid useage of float in subfunctions process data, RS232 output, GPS decode )
	- <b>OPTIMIZE_HEAPSIZE_IN_FAVOR_OF_SPEED</b> reduce HEAP useage size in favour of speed. This can lead to HEAP memory fragmentation in worst-case scenarios. Default is OFF.

\subsubsection ConfBasicHwSetup Basic Hardware Setup
The basic hardware setup of your target ( including CAN hardware/driver ) can be defined in this group.
	- <b>USE_TARGET_SYSTEM</b> type of target system from list <i>{ "pc_linux" | "pc_win32" | "esx" | "imi" | "pm167" | "mitron167" }</i> or other coming supported HALs
	- <b>USE_LITTLE_ENDIAN_CPU</b> enables several optimizations of number conversions, when a little endian CPU is used. Switch this flag to <b>off</b> when you use a big endian CPU.
	- <b>USE_CAN_DRIVER</b> CAN driver to use from list <i>{ "simulating"|"sys"|"rte"|"vector_canlib"|"vector_xl_drv_lib"|"sontheim" }</i>,<br>
			- where type "simulating" uses file based CAN simulation on each PC system target,
			- target "pc_win32" allows additionally <i>{ "vector_canlib"|"vector_xl_drv_lib"|"sontheim" }</i> ( <b>again: use vector_canlib if your drivers were installed to a CANLIB directrory - this is independent of the name of the card!! </b>),
			- and target "pc_linux" allows additionally <i>{ "rte" }</i>.
			- The other embedded targets allow only the system specific CAN driver - identified by "sys"
			- update_makefile.sh automatically selects the "sys" CAN driver, if no PC target is selected
	- <b>USE_RS232_DRIVER</b> RS232 driver to use from list <i>{ "simulating"|"sys"|"rte" }</i>
			- where type "simulating" uses file based RS232 simulation on each PC system target,
			- "sys" uses the native RS232 of every target
			- and "rte" uses the RS232 interface of the RTE system
			- update_makefile.sh automatically selects the "sys" RS232 driver, if no PC target is selected
	- <b>CAN_BUS_CNT</b> count of available CAN BUSes at target - default 1
	- <b>CAN_INSTANCE_CNT</b> count of CAN channels which shall be supported by IsoAgLib ( the application can also use the extended CAN
	                          features of IsoAgLib so that e.g. channel 0 can be used for protocol and channel 1 for internal CAN communication )<br>
	                          Must be smaller or equal as CAN_BUS_CNT.
	- <b>PRT_INSTANCE_CNT</b> count of CAN channels where the communication protocol shall be supported - the IsoAgLib can be used as gateway to
	                          route traffic between the connected CAN interfaces
	- <b>RS232_INSTANCE_CNT</b> defines amount of RS232 instances that are supported in parallel. When the ECU shall communicate on more than one channel, this variable has to be adapted to the channel amount.

\subsubsection ConfCoreComm Core Communication Setup
Setup of most important communication features:
	- <b>PRJ_ISO11783</b> selection of ISO 11783 protocol in the project
	- <b>PRJ_ISO_TERMINAL</b> selection of ISO 11783 Virtual Terminal support ( only available if PRJ_ISO11783 is activated )
	- <b>PRJ_BASE</b> gather base data like tractor speed, distance, ISO GPS, PTO RPM from BUS and make them available independent of receive time
	- <b>PRJ_MULTIPACKET_STREAM_CHUNK</b> allows to specify the preferred way of receiving multi message data streams. If chunk (default) mode is active,
	     the application can perform a parsing on-the-fly of each received burst. This allows to reduce the RAM useage for large
			 data streams. But in case all data are parsed just after complete receive of all data bye, the <b>linear</b> receive mode
			 is better. So switch chunk mode <b>off</b> in those cases.

\subsubsection ConProcData Process Data Communication Setup
Setup of process data support:
	- <b>PRJ_PROCESS</b> overall activation of process data support
	- <b>PROC_LOCAL</b> overall activation of local process data - local means that the corresponding ECU measures the data which can be requested by remote ECUs
		- <b>PROC_LOCAL_STD</b> select standard local process data IsoAgLib::iProcDataLocal_c with measure programs and enhanced management of received setpoints
		- <b>PROC_LOCAL_SIMPLE_MEASURE</b> select IsoAgLib::iProcDataLocalSimpleMeasure_c for local process data without measure programs to reduce
		     HEAP useage ( all measurement programs are stored on HEAP, as amount of active programs depend on remote ECUs )
		- <b>PROC_LOCAL_SIMPLE_SETPOINT</b> select IsoAgLib::iProcDataLocalSimpleSetpoint_c for local process data without selective reaction on received setpoints
		     ( simply store received setpoints and automatically ACK the receive of a setpoint )
		- <b>PROC_LOCAL_SIMPLE_MEASURE_SETPOINT</b> select IsoAgLib::iProcDataLocalSimpleSetpointSimpleMeasure_c for local process data with smallest resource needs - and most
		     restricted feature set
	- <b>PROC_REMOTE</b> overall activation of remote process data - remote means that the corresponding ECU requests measurement data from a remote ECU
		- <b>PROC_REMOTE_STD</b> select IsoAgLib::iProcDataRemote_c for remote process data which can use measure programs to request periodic measurement value update
		     and which provides setpoint management which can detect current master setpoint ( setpoint which is ACKed by commanded device ) and the self
		     requested value ( information if own setpoint is ACKed and if own requested setpoint interval is currently maintained by remote
		     device - this can happen if intersection between ACKed setpoint request and own setpoint request is _not_ empty, so that commanded implement can
		     satisfy both )
		- <b>PROC_REMOTE_SIMPLE_MEASURE</b> select IsoAgLib::iProcDataRemoteSimpleMeasure_c if capable setpoint management is needed, but simple one shot measurement value request is enough
		     ( reduce HEAP useage, as the potential parallel active increments are stored in dynamic lists at HEAP )
		- <b>PROC_REMOTE_SIMPLE_SETPOINT</b> select IsoAgLib::iProcDataRemoteSimpleSetpoint_c if measurement programs are needed, but no or only simple setpoint control is wanted
		     ( reduce memory useage, as no management data is needed for detection of active setpoint in relation to own setpoint wish )
		- <b>PROC_REMOTE_SIMPLE_MEASURE_SETPOINT</b> select IsoAgLib::iProcDataRemoteSimpleSetpointSimpleMeasure_c if only one shot measurement value requests and no setpoint handling is needed
		     ( in relation to IsoAgLib::iProcDataRemoteSimpleSetpointSimpleMeasureCombined_c the single setpoint and the single measurement value can represent
		     different values )
		- <b>PROC_REMOTE_SIMPLE_MEASURE_SETPOINT_COMBINED</b> select IsoAgLib::iProcDataRemoteSimpleSetpointSimpleMeasureCombined_c for a very simple approach on remote process data.
		     This is only useful if no distinguishing between setpoint and measurement value is needed

\subsubsection ConfOptDriver Optional Driver Selection
The ISO<i><sub>AgLib</sub></i> needs for basic communication service only access to core system functions like time ( optional
trigger watchdog ) and CAN. But as the author used it also for other I/O types during the initiating research project, and as
some other I/Os can deliver some important additional features to ISO<i><sub>AgLib</sub></i> core components, they are also
provided - and can be selected by the following configuration variables.
	- <b>PRJ_EEPROM</b> select if the EEPROM driver shall be used, to read/write EEPROM data from within the IsoAgLib. This is important for local
		   process data, as IsoAgLib can store intermediate values in EEPROM so that the value can be re-read on each system startup
		   ( important for cumulative values like distance, when the application has only to calculate the distance increments of the
		   current working session, and the IsoAgLib provides the cumulated value on BUS;<br>
		   it's also important to store the current SA on ISO 11783 address claim
		   --> try to reuse SA os last working session on next system start.<br>
		   the application has only to specify to EEPROM address to handle the SA;
		   IsoAgLib takes then care of storing and reloading the SA )
	- <b>PRJ_DATASTREAMS</b> enables HAL based file I/O, so that applications with file access can be easily ported between targets with different methods for file access.
	- <b>PRJ_RS232</b> select IsoAgLib::iRS232IO_c for RS232 output which can be used like the standard C++ iostreams
	- <b>PRJ_RS232_OVER_CAN</b> provides a special RS232 HAL, that uses CAN messaging for sending and receiving RS232 messages.
	- <b>PRJ_SENSOR_DIGITAL</b> select IsoAgLib::iDigitalO_c ( one instance/variable of this class per channel ) for digital On/Off input
	     ( provides automatic range check which uses diagnose function of HAL - BIOS/OS - to check if current is in allowed interval );
	     use IsoAgLib::iActorO_c for global access to all active IsoAgLib::iDigitalO_c instances
	- <b>PRJ_SENSOR_ANALOG</b> select IsoAgLib::iAnalogI_c for analog ( current or voltage ) sensor input or IsoAgLib::iAnalogIRangeCheck_c with enhanced automatic range check
	- <b>PRJ_SENSOR_COUNTER</b> select IsoAgLib::iCounterI_c for counter input. the existing HAL implementations ( e.g. for ESX ) extend the BIOS/OS
	     function, as a IsoAgLib specific event counting for very low event repetition rates is provided - the BIOS version is only
	     designed for typical RPM values
	- <b>PRJ_ACTOR</b> select if the digital output driver shall be integrated into the project. you can then use the HAL of IsoAgLib to realize a mostly hardware independent
	     access on PWM output. This is completely independent from communication tasks, but was created during research and is actively used by OSB AG for its own
	     projects

\subsubsection ConfBuildLinux Build System Configuration for LINUX
In normal cases the update_makefile.sh script can find all needed helper programs on its own.
But in some distributions, the tool <b>qmake</b> of Trolltech might be installed at a very uncommon place.
The following places are search automatically:
	- call system program <b>which qmake</b> to find qmake, if it is located in the program search path of the system
	- search in directories with pattern "/usr/lib/qt*" or "/usr/share/*" ( there should be only one version of qmake in the matched paths )

\subsubsection ConfBuildEde Build System Configuration for Cross Compilers ( like Tasking EDE )
Configuration options typical for embedded project ( these are used for target systems like "esx", "imi", "pm167" )
where the system libraries aren't placed in standard directories ( UNIX/LINUX has standard directories /usr/include, /usr/local/include, /usr/lib
and /usr/local/lib -> IsoAgLib awaits the libraries in this directories for UNIX/LINUX ).<br>
These settings are at the moment only used for project generation of
	- Tasking EDE

The following config variables should match the need of most cross compilers:
	- <b>USE_EMBED_COMPILER_DIR</b> path to the embedded compiler
	- <b>USE_EMBED_LIB_DIRECTORY</b> path ( relative to ISO<i><sub>AgLib</sub></i> root or absolute )
	     to the libraries of the embedded BIOS / OS ( please seperate entries by whitespace and use only UNIX style directory seperator "/" )
	- <b>USE_EMBED_HEADER_DIRECTORY</b> path ( relative to ISO<i><sub>AgLib</sub></i> root or absolute )
	     to the headers of the embedded BIOS / OS ( please seperate entries by whitespace and use only UNIX style directory seperator "/" )
	- <b>USE_EMBED_LIBS</b> needed library files ( please seperate entries by whitespace )
	- <b>USE_EMBED_BIOS_SRC</b> special source files from the BIOS/OS which must be inserted into the sources list
	     ( e.g. startup files which could be delivered as asm file and must be compiled during runtime,
	     as the BIOS/OS allows there some individual adaptation ) ( please seperate entries by whitespace )
	- <b>USE_EMBED_ILO</b> linker / locater control file which defines HEAPSIZE and other important project specific target settings for link time

\subsubsection ConfBuildWin32 Build System Configuration for Win32 ( like Visual C++ and Dev-C++ )
The update_makefile.sh script can create project files for Visual C++ ( DSP ) and Dev-C++.
As the Open Souce IDE Dev-C++ is really good, it is strong recommended to use to compile the vt2iso tool.
But the driver DLLs for Vector-Informatik CAN cards don't interact with Dev-C++ built EXE programs.
So update_makefile.sh was extended to write DSP project files, which are meant for VC6 and can be imported
into newer version of Microsoft Visual Studio VC++.<br>
As VC6 version of the <b>S</b>tandard <b>T</b>emplate <b>L</b>ibrary is really not standard conformant, you need
to install STLport as described in \ref Vc6StlPort. Please specify the path to STLport, if you didn't place it into <i>C:\\</i> and rename STLport-3.6.2 to STLport:
	- <b>USE_STLPORT_HEADER_DIRECTORY</b> directory to the <i>stlport</i> directory within the STLport package - the C++ headers are located there
	- <b>USE_STLPORT_LIBRARY_DIRECTORY</b> path to STLport libraries in case you selected the option to use the STLport version of IOSTREAMS ( and not the native version as advised by the doc at \ref Vc6StlPort )
	    let empty if native IOSTREAMS library is used

The next configuration variables are needed for Vector-Informatik and Sontheim CAN cards.
As Vector-Informatik provides two types of programming libraries which can be used for the same cards, the
ISO<i><sub>AgLib</sub></i> reflects this option. To ease directory management, ISO<i><sub>AgLib</sub></i>
awaits the potentially parallel installed versions rooted in the same parent directory.<br>
E.g when you selected "C:/Development" as base directory during the SETUP of both CAN program linbraries,
you will get
	- the CANLIB driver in <i>C:/Development/CANLIB</i>
	- the XL Driver Library in <i>C:/Development/XL Driver Library</i>

Manually extract the Sontheim API files to <i>C:/Development/Sontheim</i>.

Now ISO<i><sub>AgLib</sub></i> can access all of them if you specify:
	- <b>USE_WIN32_LIB_DIRECTORY="C:/Development"</b>,
	- <b>USE_WIN32_HEADER_DIRECTORY="C:/Development"</b>

which is the default setting. The script <i>update_makefile.sh</i> will find all versions of the driver.

The ISO<i><sub>AgLib</sub></i> HAL adaptation to the Vector-Informatik CAN driver can be configured by the configuration file
for a specific hardware type ( list <i>{ HWTYPE_VIRTUAL|HWTYPE_CANCARDX|HWTYPE_CANAC2|HWTYPE_CANAC2PCI }</i> - the XL driver
places the "XL_" string in front of the card type name, so that both CANLIB and XL can be used with the same conf_* type names ).
As a special option, ISO<i><sub>AgLib</sub></i> can use all real hardware channels it finds, so that your EXE can be flexibly
used for different CAN card types of Vector-Informatik. You can use this option, if you select <b>HWTYPE_AUTO</b> as hardware
type. In case only the Vector-Informatik Virtual Channel is found, then these typically two channels are used instead.<br>
The Sontheim CAN card driver should be used also with the automatic CAN card type detection. This is realized by testing the API init for
a list of supported CAN card types. As soon as the API is successfully initialized for one CAN card type, that type is used.<br>


The setup file can be derived from the following example
( see compiler_projects/projectGeneration/conf_0_0_AddressClaimIso ):

\code
# Filename: conf_0_0_AddressClaimIso
# Configuration setting for tutorial example 0_0_AddressClaimIso
# in the tutorial group 0_SystemMgmt

# ###############################################################
# Project Identification
# ###############################################################

# define project name - used for directory with makefile
PROJECT=0_0_AddressClaimIso

# define the project author
# - used for IDE project file types, where the author is stored in the project file
PROJECT_AUTHOR=MyName
PROJECT_AUTHOR_EMAIL=MyEmail@Location

# ###############################################################
# Selection of Application Sources
# ###############################################################

# define the path where the aplication can be found
# ( in relation to the root of the IsoAgLib
#    - ONLY RELATIVE PATH )
# seperate files by whitespace
REL_APP_PATH="examples/tutorial/0_Part5_NetworkManagement/0_0_AddressClaimIso"
# define the name of the app
# ( if this variable is not set, then
#   all files of the selected directories are used )
# seperate files by whitespace
APP_SRC_FILE="0_0_AddressClaimIso.cpp"
# define the file extensions to include for the
# application source file search ( default: *.c *.cc *.cpp *.h *.hpp )
# APP_SEARCH_SRC_CONDITION="*.cc *.c *.cpp"
# APP_SEARCH_HDR_CONDITION="*.h *.hpp"
# define pathes ( jokers like "*" are allowed ) which shall be
# excluded from application file search
# ( example:
#    - exclude path Fii somewhere in deep dir: ".../Fii/..."
#    - exclude file Foo.cpp as part of directory Fii: ".../Fii/Foo.c"
#      ( includes occurences of Foo.cpp in other directories!! )
#  )
# APP_PATH_EXLCUDE=""
# define filenames which shall be excluded in all directories
# ( jokers like "*" are allowed - example "test*.cpp" )
# APP_SRC_EXCLUDE=""

# ###############################################################
# Selection of Basic Project Settings
# ###############################################################

# define relative path to the main directory if the IsoAgLib
# - i.e. where both xgpl_src and IsoAgLibExamples are located
# - use relative path as seen from the work directory where the
#   update_makefile.sh script is called and the conf_xy file is placed
#   ( you have only to change it, if you make a copy of the compiler_projects
#     subdirectory for your own project, so that the path from there is no more
#     "../.." )
ISO_AG_LIB_PATH="../.."

# optionally set individual DEFINES - seperated by whitespace
# ( e.g. DEBUG to activate some debug messages )
# Some debugging defines:
# - DEBUG for different internal IsoAgLib information
# - DEBUG_CAN_BUFFER_FILLING for RS232 output of MAX amount of buffered CAN messages
#   ( important to decide on amount of items in the BIOS/OS CAN receive buffer )
# - DEBUG_HEAP_USEAGE for RS232 output of amount of bytes which are needed of one
#   item in the different types of dynamic lists: MsgObj_c , FilterBox_c , IsoItem_c ,
#   MeasureSubprog_c , SetpointRegister ;
#   additionally print calculated amount of HEAP memory which is used by the several types of
#   dynamic lists ( output on each list change )
# PRJ_DEFINES=""

# select if Debug messages within the IsoAgLib shall be sent via RS232
# ( if this is activated, the PRJ_RS232 setting is activated -> integrate
#   the IsoAgLib RS232 driver extension to your project )
# PRJ_SEND_DEBUG=1

# select if the project shall use the float data type
# default is FALSE as far as possible
# ( this has an impact on process data, RS232 output,
#   GPS decode )
# USE_FLOAT_DATA_TYPE=0

# select if HEAP usage should reduce size in favour of speed
# ( default: maximize speed, which costs about 10KByte more HEAPSIZE,
#            but avoids slow memory allocation in too small units )
# OPTIMIZE_HEAPSIZE_IN_FAVOR_OF_SPEED=0

# ###############################################################
# Basic Hardware Setup
# ###############################################################

# select watned type of target system: "pc_linux" | "pc_win32" | "esx" | "imi" | "pm167" | "mitron167"
USE_TARGET_SYSTEM="pc_linux"

# specify integer number memory representation type: LITTLE or BIG ENDIAN
# default is for most targets: LITTLE -> USE_LITTLE_ENDIAN_CPU=1
# typical cases for BIG ENDIAN are some ARM and mostly all Motorola 68k and PowerPC CPUs
# USE_LITTLE_ENDIAN_CPU=1

# select wanted type of CAN driver connection: "simulating"|"sys"|"rte"|"linux_server_client"|"vector_canlib"|"vector_xl_drv_lib"
# targets other than pc_linux or pc_win32 can only use "sys"
# only target "pc_win32" can use the driver "vector_canlib"|"vector_xl_drv_lib"
# only target "pc_linux" can us the driver "rte"|"linux_server_client"
USE_CAN_DRIVER="simulating"
# select wanted type of RS232 driver connection: "simulating"|"sys"|"rte"
# targets other than pc_linux or pc_win32 can only use "sys"
# only target "pc_linux" can us the driver "rte"
USE_RS232_DRIVER="simulating"

# define the amount of available CAN BUSes at the ECU
# ( default 1 )
CAN_BUS_CNT=1

# define the amount of CAN instances to support
# ( all values lower than 1 are overwritten by default 1 )
CAN_INSTANCE_CNT=1

if [ $CAN_INSTANCE_CNT -gt 1 ] ; then
	# if more than one CAN BUS is defined, the selected
  # protocol(s) can be executed as independent instances
  # at more than one channel
  # ( if more than one CAN instance is used, but
  #   only one channel is used for protocol, than
  #   the index 0 - i.e. the first item is used for protocol )
  PRT_INSTANCE_CNT=1
else
	# default is to run only one protocol instance
  PRT_INSTANCE_CNT=1
fi

# define the amount of RS232 instances to support
# ( all values lower than 1 are overwritten by default 1 )
# This is especially important if your ECU has more than one RS232 channel
RS232_INSTANCE_CNT=1

# ###############################################################
# Core Communication Setup
# ###############################################################

# set value of feature to 1 if wanted
# unset or set to 0 if not wanted
PRJ_ISO11783=1
# PRJ_ISO_TERMINAL=0

# select stream receive strategy:
# chunk (default): use list of chunks where each receive burst is stored in one chunk -> usefull when on-the-fly parsing is used
#                  and thereby less HEAP has to be used for storage
#                  -> let PRJ_MULTIPACKET_STREAM_CHUNK stay commented out, or set to 1
# linear         : if only final parsing is used, then chunk handling can't reduce HEAP usage, so that simpler linear buffer can be used
#                  -> set  PRJ_MULTIPACKET_STREAM_CHUNK to 0
# PRJ_MULTIPACKET_STREAM_CHUNK=1

# select if base data like tractor speed, distance, ISO GPS, PTO RPM
# shall be gathered from BUS ( either receive or send )
# PRJ_BASE=0

# ###############################################################
# Process Data Communication Setup
# ###############################################################

# activate globally the use of process data
# PRJ_PROCESS=0

# decide if local process data are wanted
# PROC_LOCAL=0

# select the feature set of the wanted local process data

# select standard local process data iProcDataLocal_c with
# measure programs and enhanced management of received setpoints
# PROC_LOCAL_STD=0

# select iProcDataLocalSimpleMeasure_c for
# local process data without measure programs to reduce
# HEAP useage ( all measurement programs are stored on HEAP, as
# amount of active programs depend on remote ECUs )
# PROC_LOCAL_SIMPLE_MEASURE=0

# select iProcDataLocalSimpleSetpoint_c for
# local process data without selective reaction on received setpoints
# ( simply store received setpoints and automatically ACK the receive of
#   a setpoint )
# PROC_LOCAL_SIMPLE_SETPOINT=0

# select iProcDataLocalSimpleSetpointSimpleMeasure_c for
# local process data with smallest resource needs - and most
# restricted feature set
# PROC_LOCAL_SIMPLE_MEASURE_SETPOINT=0

# decide if remote process data are wanted
# PROC_REMOTE=0

# select the feature set of the wanted remote process data

# select iProcDataRemote_c for remote process data which can
# use measure programs to request periodic measurement value update
# and which provides setpoint management which can detect current master
# setpoint ( setpoint which is ACKed by commanded device ) and the self
# requested value ( information if own setpoint is ACKed and if own
# requested setpoint interval is currently maintained by remote device
# - this can happen if intersection between ACKed setpoint request and
# own setpoint request is _not_ empty, so that commanded implement can
# satisfy both )
# PROC_REMOTE_STD=0

# select iProcDataRemoteSimpleMeasure_c if capable setpoint management
# is needed, but simple one shot measurement value request is enough
# ( reduce HEAP useage, as the potential parallel active increments are
#   stored in dynamic lists at HEAP )
# PROC_REMOTE_SIMPLE_MEASURE=0

# select iProcDataRemoteSimpleSetpoint_c if measurement programs are needed,
# but no or only simple setpoint control is wanted
# ( reduce memory useage, as no management data is needed for detection
#   of active setpoint in relation to own setpoint wish )
# PROC_REMOTE_SIMPLE_SETPOINT=0

# select iProcDataRemoteSimpleSetpointSimpleMeasure_c if only
# one shot measurement value requests and no setpoint handling is needed
# ( in relation to iProcDataRemoteSimpleSetpointSimpleMeasureCombined_c
#   the single setpoint and the single measurement value can represent
#   different values )
# PROC_REMOTE_SIMPLE_MEASURE_SETPOINT=0

# select iProcDataRemoteSimpleSetpointSimpleMeasureCombined_c for
# a very simple approach on remote process data.
# This is only useful if no distinguishing between setpoint and measurement
# value is needed
# PROC_REMOTE_SIMPLE_MEASURE_SETPOINT_COMBINED=0

# ###############################################################
# Optional Driver Selection
# ###############################################################

# select if the EEPROM driver shall be used, to read/write EEPROM
# data from within the IsoAgLib. This is important for local
# process data, as IsoAgLib can store intermediate values in EEPROM
# so that the value can be re-read on each system startup
# ( important for cumulative values like distance, when the
#   application has only to calculate the distance increments of the
#   current working session, and the IsoAgLib provides the cumulated
#   value on BUS;
#   it's also important to store the current SA on ISO 11783 address claim
#   --> try to reuse SA os last working session on next system start.
#       the application has only to specify to EEPROM address to handle the SA;
#       IsoAgLib takes then care of storing and reloading the SA )
# PRJ_EEPROM=0

# select if the datastreams from HAL for file input and output shall be used
# PRJ_DATASTREAMS=0

# select iRS232IO_c for RS232 output which can be used like the
# standard C++ iostreams
# PRJ_RS232=0

# select special RS232 virtual driver HAL for RS232_over_CAN
# activating this implicitly activates PRJ_RS232 with this special
# HAL driver
PRJ_RS232_OVER_CAN=1

# select iDigitalO_c ( one instance/variable of this class per channel )
# for digital On/Off input
# ( provides automatic range check which uses diagnose function of HAL
#  - BIOS/OS - to check if current is in allowed interval );
# use iActorO_c for global access to all active iDigitalO_c instances
# PRJ_SENSOR_DIGITAL=0

# select iAnalogI_c for analog ( current or voltage ) sensor input.
# or iAnalogIRangeCheck_c with enhanced automatic range check
# PRJ_SENSOR_ANALOG=0

# select iCounterI_c for counter input.
# the existing HAL implementations ( e.g. for ESX ) extend the BIOS/OS
# function, as a IsoAgLib specific event counting for very low
# event repetition rates is provided - the BIOS version is only
# designed for typical RPM values
# PRJ_SENSOR_COUNTER=0

# select if the digital output driver shall be integrated into the project.
# you can then use the HAL of IsoAgLib to realize a mostly hardware independend
# access on PWM output. This is completely independent from communication tasks,
# but was created during research and is actively used by OSB AG for its own
# projects
# PRJ_ACTOR=0

# ###############################################################
# Build System Configuration for LINUX
# ###############################################################

# ###############################################################
# Build System Configuration for Cross Compilers ( like Tasking EDE )
# ###############################################################

# #############################################
# Configuration options typical for embedded project
# ( these are used for target systems like "esx",
#   "imi", "pm167" )
# where the system libraries aren't placed in standard
# directories ( UNIX/LINUX has standard directories
# /usr/include, /usr/local/include, /usr/lib
# and /usr/local/lib -> IsoAgLib awaits the libraries
# in this directories for UNIX/LINUX )
# These settings are at the moment only used for project
# generation of
# + Tasking EDE
#
# But this could be extended to other compilers.
# These config settings allow to create project files
# which can be used to generate runnable HEX out of the
# box from automatic generation
# #############################################

# SETTINGS FOR EMBEDDED PROJECTS WITHIN CROSS COMPILER
# specify the path to the embedded compiler
# USE_EMBED_COMPILER_DIR="c:/programme/tasking/7.56/c166"

# specify the path ( relative to IsoAgLib root or absolute )
# to the libraries of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_LIB_DIRECTORY="commercial_BIOS/bios_esx"

# specify the path ( relative to IsoAgLib root or absolute )
# to the headers of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_HEADER_DIRECTORY="commercial_BIOS/bios_esx"

# specify the needed library files
# ( please seperate entries by whitespace )
# USE_EMBED_LIBS="C756/Xos20l.lib Module/Xma20l.lib"

# specify special source files from the BIOS/OS
# which must be inserted into the sources list
# ( e.g. startup files which could be delivered as
#   asm file and must be compiled during runtime,
#   as the BIOS/OS allows there some individual adaptation )
# ( please seperate entries by whitespace )
# USE_EMBED_BIOS_SRC="Xos20go.asm Xos20err.c xos20esx.h XOS20EEC.H XOS20EEC.OBJ"

# specify the needed linker / locater control file
# USE_EMBED_ILO="Xos20lcs.ilo"

# ###############################################################
# Build System Configuration for Win32 ( like Visual C++ and Dev-C++ )
# ###############################################################

# specify path to headers of STLport - default corresponds to \ref Vc6StlPort
# USE_STLPORT_HEADER_DIRECTORY="C:/STLport/stlport"

# specify path to STLport libraries in case you selected the option to use the STLport
# version of IOSTREAMS ( and not the native version as advised by the doc at \ref Vc6StlPort )
# let empty if native IOSTREAMS library is used
# USE_STLPORT_LIBRARY_DIRECTORY=""

# SETTINGS FOR WIN32 PROJECTS WITH WIN32 CAN CARD
# ( esp. Vector Informatik )
# specify the path ( relative to IsoAgLib root or absolute )
# to the WIN32 CAN libraries
# IMPORTANT: Set the path to the directory where you installed
# the CAN driver library during its SETUP.EXE process
# As the individual library file sets are at fixed places
# within a CAN driver installation, the IsoAgLib will
# select the library files automatically
# ==>> this path can be used without changes, if several
#      driver version like "CANLIB" and "XL Driver Library"
#      are installed in parallel
#      ( all IsoAgLib parts will access the individual
#        headers and libraries with the addition of the
#        default directory name from the SETUP.EXE
#        e.g. "<USE_WIN32_LIB_DIRECTORY>/CANLIB"
#          or "<USE_WIN32_LIB_DIRECTORY>/XL Driver Library" )
# USE_WIN32_LIB_DIRECTORY="C:/Development"

# specify the path ( relative to IsoAgLib root or absolute )
# to the WIN32 CAN headers
# IMPORTANT: Set the path to the directory where you installed
# the CAN driver library during its SETUP.EXE process
# ==>> this path can be used without changes, if several
#      driver version like "CANLIB" and "XL Driver Library"
#      are installed in parallel
#      ( all IsoAgLib parts will access the individual
#        headers and libraries with the addition of the
#        default directory name from the SETUP.EXE
#        e.g. "<USE_WIN32_LIB_DIRECTORY>/CANLIB"
#          or "<USE_WIN32_LIB_DIRECTORY>/XL Driver Library" )
# ( please seperate entries by whitespace )
# USE_WIN32_HEADER_DIRECTORY="C:/Development"

# specify the wanted Hardware Type of the CAN card
# ( esp. Vector Informatik CAN drivers can be used for several
#   CAN cards of their product line )
# Examples: HWTYPE_AUTO|HWTYPE_VIRTUAL|HWTYPE_CANCARDX|HWTYPE_CANAC2|HWTYPE_CANAC2PCI
#           HWTYPE_CANCARDXL|HWTYPE_CANCARD2
# ( refer their documentaion to find more types )
# ( IsoAgLib places automatically "XL_" before the card define,
#   if the XL driver is selected --> DONT'T set the XL_ here again
#   ==> this allows simpler switch between different CAN driver libs )
# USE_WIN32_CAN_HW_TYPE="HWTYPE_AUTO"
\endcode

\section InstallIsoToolVt2Iso Installing vt2iso - Tool for Creation of ISO 11783 Virtual Terminal Masks

The ISO<i><sub>AgLib</sub></i> provides a complete Open Source Tool Chain for ISO 11783 virtual terminals.
<b>First of all, you don't have to build vt2iso, as an EXE file is also part of the downloaded archive.</b><br>
But if you like to test some changes, or simply want to rebuild from the current repository version, you need to perform
the following build process.<br>

A very important part is the tool <b>vt2iso</b> which parses the XML mask definition files and creates
ROMable constant declarations for all used virtual terminal objects, which can be easily uploaded to the terminal
( see at the corresponding tutorial for more information on this ).

\subsection InstallFreeImage Install Image Manipulation Library Free Image
The <b>vt2iso</b> can read almost all types of bitmaps to get the compileable variable array representation
of bitmaps for the ECU. This stuff is greatly supported by the Open Source libraries <b>FreeImage</b>
and <b>Paintlib</b> ( http://www.paintlib.de/paintlib/ ) ( alternative - choose the library that is easier to install for you ).<br>
Vt2iso uses these libraries to access the color values of all pixels ( and to convert from palettized / indexed formats
if needed ) so that the needed conversion to the chosen color depth can be performed.
Vt2iso uses an automatic calculation of a threshold to get the highest contrast in the picture ( optimum 50:50 relation between
black and white ).<br>
\subsubsection FreeImageLinux Installation of Free Image Library on LINUX
The FreeImage library can be best compiled from source for LINUX ( simple to compile with make based on
provided Makefile ).
Please make sure that the library and include files are installed to system directories ( need root user to install )
or adapt the Makefiles on your own ( no support by author for this config ).
The FreeImage library may also be available as a ready made binary distribution.

\subsubsection FreeImageWin32 Installation of Free Image Library on Win32
On Win32 Platform the Dev-C++ IDE provides a very simple download as extension package from within the program. Thus you have no
installation afford with any make or manual install ( see \ref InstallDevCpp ).
In case you still want to use Visual Studio, then please look at the manuals on the project webpage.

( Remark: As this program is only running on development PC, the compiler needn't be able to generate
  code for embedded platforms -> Tasking not needed for this on Win32 )

\subsection InstallXerces Install XML Parser Library Xerces of the Apache Foundation

The parsing of the XML files is performed by the Xerces library from apache, which can be downloaded from
http://xml.apache.org/xerces-c/index.html .

\subsubsection LinuxXerces Installation of Xerces-C on LINUX
Most of the LINUX distributions provide a binary package for Xerces-C which can be easily installed from within the
distribution specific package manager. Select at least a Xerces-C package which contains libxerces-c.so.2* and
the corresponding headers in /usr/include/xercesc/ ( or /usr/local/include/xercesc/ ).

\subsubsection Win32Xerces Installation of Xerces-C on Windows
<ol>
<li>Download the Dev-C++ prepared binary of Xerces-C from http://devpaks.org/show.php?devpak=41
<li>Call the packagemanager for Dev-C++ ( menu TOOLS->PACKAGE MANAGER ) and select
    the downloaded archive xerces-c_2_5_0-mingw.DevPak for install
</ol>

\subsection CompileVt2Iso Compiling vt2iso

\subsubsection CompileVt2IsoLinux Compiling vt2iso on LINUX
<ol>
<li>cd build_utils/vt2iso
<li>call make
</ol>


\subsubsection CompileVt2IsoWin32 Compiling VT2Iso on Win32 with Dev-C++
<ol>
<li>Install first Dev-C++ with the library packages FreeImage and ImageLib
<li>Install Xerces-C ( see above )
<li>Open the Dev-C++ project file build_utils/vt2iso/Vt2Iso.dev
<li>Start project compile
<li>Copy the dll's xerces-c_2_5_0.dll and FreeImage.dll to a place where Vt2Iso.exe
    can find them if you execute the EXE ( e.g. same directory as EXE or system directory )
    or extend the PATH. As <a href="mailto:Achim.Spangler@osb-ag:de">Achim Spangler</a> is very seldom using Win32 development tools,
    I ask you to check other resources on how to manage dll placement.
</ol>

\subsection UseVt2Iso Creating mask definitions with vt2iso
You can find the description of the XML syntax which is used by vt2iso at \ref XMLspec .<br>
An example mask pool is defined for the example 3_0_VirtualTerminalIso.cpp . Some handler functions are also demonstrated there.<br>
The automatic generation itself is triggered by a call like described in the script build_utils/vt2iso-3-0_VirtualTerminalIso.sh ( LINUX )
or build_utils/vt2iso-3-0_VirtualTerminalIso.bat ( Win32 ).
This script/BAT results in suitable files with constant variable array definition for include into the main souce
file of a project ( in this example in examples/tutorial/3_Terminal/3_0_VirtualTerminalIso/MaskDefinition/ ).



*/
