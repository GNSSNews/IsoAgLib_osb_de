# This file servers as a template to use when starting a new IsoAgLib project
# Make a copy of this file and adapt it to your needs: Set mandatory values
# and activate some commented-out options (if needed)...
#
# The steps are:
#  1.) Setup your wanted IsoAgLib configuration here
#  2.) Create your application files (these will be collected by update_makefile.sh)
#  3.) Run "update_makefile.sh conf_template"
#      in your native Linux or MSYS/MinGW Windows shell to get the generated project


# ###############################################################
# Project Identification
# ###############################################################

# Project name - used for directory with make-/project-file
PROJECT=AddressStealer

# Project author/email
# - used for IDE project file types, where the author is stored in the project file
PROJECT_AUTHOR="Martin Wodok"
PROJECT_AUTHOR_EMAIL=m.wodok@osb-ag.de


# ###############################################################
# Main IsoAgLib Path
# ###############################################################

# Path to IsoAgLib's main directory (where "library" is located in)
# relative to the directory from which "update_makefile.sh" is called.
ISO_AG_LIB_PATH="../.."


# ###############################################################
# Selection of Application Sources
# ###############################################################

# Path(es) to the application files
# relative to the IsoAgLib-path (as specified right above here)
# (separate multiple directories by whitespace)
REL_APP_PATH="tests/src/AddressStealer"

# Filename of the application
# If not set, all files of the selected directories are collected
# (separate multiple files by whitespace)
APP_SRC_FILE="AddressStealer.cpp"

# File extensions to include for the application source file search
# (default: Sources: "*.c *.cc *.cpp" - Headers: "*.h *.hpp")
# APP_SEARCH_SRC_CONDITION="*.cc *.c *.cpp"
# APP_SEARCH_HDR_CONDITION="*.h *.hpp"

# Pathes which shall be excluded from the application file search
# (wildcards like "*" are allowed) 
# Example:
#    - exclude path Fii somewhere in deep dir: ".../Fii/..."
#    - exclude file Foo.cpp as part of directory Fii: ".../Fii/Foo.c"
#      (includes occurences of Foo.cpp in other directories!!)
# APP_PATH_EXLCUDE=""

# Filenames which shall be excluded in all directories
# (wildcards like "*" are allowed)
# Example: "test*.cpp"
# APP_SRC_EXCLUDE=""

# Additional Include pathes
# relative to the IsoAgLib-path. (directories of REL_APP_PATH are already
# integrated into the compiler list of header include search paths)
# (Absolute include paths to external directories should be defined in config variables
#  like: USE_WIN32_EXTERNAL_INCLUDE_PATH, USE_LINUX_EXTERNAL_INCLUDE_PATH, USE_EMBED_HEADER_DIRECTORY)
# (separate multiple directories by whitespace)
# PRJ_INCLUDE_PATH=""


# ###############################################################
# Selection of Basic Project Settings
# ###############################################################

# Optionally set individual DEFINES
# Examplary IsoAgLib debugging defines include
# - DEBUG for different internal IsoAgLib information
# - DEBUG_CAN_BUFFER_FILLING for RS232 output of MAX amount of buffered CAN messages
#   (important to decide on amount of items in the BIOS/OS CAN receive buffer)
# - DEBUG_HEAP_USEAGE for RS232 output of amount of bytes which are needed of one
#   item in the different types of dynamic lists:
#     MsgObj_c, FilterBox_c, IsoItem_c, MeasureSubprog_c, SetpointRegister
#   Additionally print calculated amount of HEAP memory which is used by the
#   several types of dynamic lists (output on each list change)
# (separate multiple defines by whitespace)
# PRJ_DEFINES=""

# Select if Debug messages within IsoAgLib are sent via RS232
# (automatically activates the PRJ_RS232 setting)
# PRJ_SEND_DEBUG=1

# Select if the project shall use the float data type
# default is FALSE as far as possible
# (this has impact on process data, RS232 output, GPS decode)
# USE_FLOAT_DATA_TYPE=0

# select if HEAP usage should reduce size in favour of speed
# (default: maximize speed, which costs about 10KByte more HEAPSIZE,
#           but avoids slow memory allocation in too small units)
# OPTIMIZE_HEAPSIZE_IN_FAVOR_OF_SPEED=0


# ###############################################################
# Basic Hardware Setup
# ###############################################################

# Select type of target system:
#   Host:     "pc_linux" | "pc_win32"
#   Embedded: "esx" | "imi" | "c2c" | "esxu" | "pm167" | "mitron167"
USE_TARGET_SYSTEM="pc_linux"

# specify integer number memory representation type: LITTLE or BIG ENDIAN
# default is for most targets: LITTLE -> USE_LITTLE_ENDIAN_CPU=1
# typical cases for BIG ENDIAN are some ARM and mostly all Motorola 68k and PowerPC CPUs
# USE_LITTLE_ENDIAN_CPU=1

# IsoAgLib switches by default the system relais to ON on startup
# this can be avoided by setting PRJ_DO_NOT_START_RELAIS_ON_STARTUP to 1
# PRJ_DO_NOT_START_RELAIS_ON_STARTUP=0

# select enhanced CAN processing which is only available for some
# CAN architectures, where the OS/BIOS does already provide selective
# receive with individual <filters, mask> combinations
# default: off
PRJ_SYSTEM_WITH_ENHANCED_CAN_HAL=1

# select wanted type of CAN driver connection: "simulating"|"sys"|"msq_server"|"socket_server"
# targets other than pc_linux or pc_win32 can only use "sys"
# target "pc_win32" can't use "msq_server" (Linux message queue version of the can_server)
USE_CAN_DRIVER="msq_server"

# the can server ("msq_server"|"socket_server") is available for different can cards,
# where all of them use some common files and just one individual file.
# target "pc_linux": a multi target Makefile is created which builds the application
#                    and also the can_server with support for the selected CAN device (no_card|pcan|A1|rte)
# target "pc_win32": extra project files exist for the can_server (socket version)
#                    with support for different CAN devices
#                    (see the folder "canserver" in compiler_projects/Dev-C++ and compiler_projects/VC6)
#                    therefore for "pc_win32" only USE_CAN_DEVICE_FOR_SERVER="no_card" should be used
# USE_CAN_DEVICE_FOR_SERVER=no_card|pcan|A1|rte (default: no_card)
USE_CAN_DEVICE_FOR_SERVER="no_card"

# select wanted type of RS232 driver connection: "simulating"|"sys"|"rte"
# targets other than pc_linux or pc_win32 can only use "sys"
# only target "pc_linux" can us the driver "rte"
USE_RS232_DRIVER="simulating"

# define the amount of available CAN BUSes at the ECU
# ( default 1 )
CAN_BUS_CNT=2

CAN_BUS_USED=0

# define the amount of CAN instances to support
# ( all values lower than 1 are overwritten by default 1 )
CAN_INSTANCE_CNT=2

PRT_INSTANCE_CNT=1

# define the amount of RS232 instances to support
# ( all values lower than 1 are overwritten by default 1 )
# This is especially important if your ECU has more than one RS232 channel
RS232_INSTANCE_CNT=1


# ###############################################################
# Core Communication Setup
# ###############################################################

# set value of feature to 1 if wanted
# unset or set to 0 if not wanted
PRJ_ISO11783=1

# ###############################################################
# Optional Driver Selection
# ###############################################################

# select if the EEPROM driver shall be used, to read/write EEPROM
# data from within the IsoAgLib. This is important for local
# process data, as IsoAgLib can store intermediate values in EEPROM
# so that the value can be re-read on each system startup
# ( important for cumulative values like distance, when the
#   application has only to calculate the distance increments of the
#   current working session, and the IsoAgLib provides the cumulated
#   value on BUS;
#   it's also important to store the current SA on ISO 11783 address claim
#   --> try to reuse SA os last working session on next system start.
#       the application has only to specify to EEPROM address to handle the SA;
#       IsoAgLib takes then care of storing and reloading the SA )
PRJ_EEPROM=1

# select if the datastreams from HAL for file input and output shall be used
# PRJ_DATASTREAMS=0

# select iRS232IO_c for RS232 output which can be used like the
# standard C++ iostreams
# PRJ_RS232=0

# select special RS232 virtual driver HAL for RS232_over_CAN
# activating this implicitly activates PRJ_RS232 with this special
# HAL driver
# PRJ_RS232_OVER_CAN=0

# select iDigitalO_c ( one instance/variable of this class per channel )
# for digital On/Off input
# ( provides automatic range check which uses diagnose function of HAL
#  - BIOS/OS - to check if current is in allowed interval );
# use iActorO_c for global access to all active iDigitalO_c instances
# PRJ_SENSOR_DIGITAL=0

# select iAnalogI_c for analog ( current or voltage ) sensor input.
# or iAnalogIRangeCheck_c with enhanced automatic range check
# PRJ_SENSOR_ANALOG=0

# select iCounterI_c for counter input.
# the existing HAL implementations ( e.g. for ESX ) extend the BIOS/OS
# function, as a IsoAgLib specific event counting for very low
# event repetition rates is provided - the BIOS version is only
# designed for typical RPM values
# PRJ_SENSOR_COUNTER=0

# select if the digital output driver shall be integrated into the project.
# you can then use the HAL of IsoAgLib to realize a mostly hardware independend
# access on PWM output. This is completely independent from communication tasks,
# but was created during research and is actively used by OSB AG for its own
# projects
# PRJ_ACTOR=0

# ###############################################################
# Build System Configuration for LINUX
# ###############################################################

# The libraries (headers and library files) can be
# installed with "make install_library" to a global system
# directory, so that applications can be compiled with
# refering to a general system path like "/usr/local/include"
# and "/usr/local/lib".
# ISOAGLIB_INSTALL_PATH="/usr/local/"


# ###############################################################
# Build System Configuration for Cross Compilers ( like Tasking EDE )
# ###############################################################

# #############################################
# Configuration options typical for embedded project
# ( these are used for target systems like "esx",
#   "imi", "pm167" )
# where the system libraries aren't placed in standard
# directories ( UNIX/LINUX has standard directories
# /usr/include, /usr/local/include, /usr/lib
# and /usr/local/lib -> IsoAgLib awaits the libraries
# in this directories for UNIX/LINUX )
# These settings are at the moment only used for project
# generation of
# + Tasking EDE
#
# But this could be extended to other compilers.
# These config settings allow to create project files
# which can be used to generate runnable HEX out of the
# box from automatic generation
# #############################################

# SETTINGS FOR EMBEDDED PROJECTS WITHIN CROSS COMPILER
# specify the path to the embedded compiler
# USE_EMBED_COMPILER_DIR="c:/programme/tasking/7.56/c166"

# specify the path ( relative to IsoAgLib root or absolute )
# to the libraries of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_LIB_DIRECTORY="library/commercial_BIOS/bios_esx"

# specify the path ( relative to IsoAgLib root or absolute )
# to the headers of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_HEADER_DIRECTORY="library/commercial_BIOS/bios_esx"

# specify the needed library files
# ( please seperate entries by whitespace )
# USE_EMBED_LIBS="C756/Xos20l.lib Module/Xma20l.lib"

# specify special source files from the BIOS/OS
# which must be inserted into the sources list
# ( e.g. startup files which could be delivered as
#   asm file and must be compiled during runtime,
#   as the BIOS/OS allows there some individual adaptation )
# ( please seperate entries by whitespace )
# USE_EMBED_BIOS_SRC="Xos20go.asm Xos20err.c xos20esx.h XOS20EEC.H XOS20EEC.OBJ"

# specify the needed linker / locater control file
# USE_EMBED_ILO="Xos20lcs.ilo"

# ###############################################################
# Build System Configuration for Win32 ( like Visual C++ and Dev-C++ )
# ###############################################################

# specify path to headers of STLport - default corresponds to \ref Vc6StlPort
# USE_STLPORT_HEADER_DIRECTORY="C:/STLport/stlport"

# specify path to STLport libraries in case you selected the option to use the STLport
# version of IOSTREAMS ( and not the native version as advised by the doc at \ref Vc6StlPort )
# let empty if native IOSTREAMS library is used
# USE_STLPORT_LIBRARY_DIRECTORY=""


# include directory for external libraries in windows (MSVC and Dev-Cpp)
# USE_WIN32_EXTERNAL_INCLUDE_PATH=""

# library directory for external libraries in windows (MSVC and Dev-Cpp)
# USE_WIN32_EXTERNAL_LIBRARY_PATH=""

# additional libs when using MSVC (notation of library files differs between MSVC and Dev-Cpp)
# USE_MSVC_EXTERNAL_LIBRARIES=""

# additional libs when using Dev-Cpp (notation of library files differs between MSVC and Dev-Cpp)
# USE_DEVCPP_EXTERNAL_LIBRARIES=""

# ###############################################################
# Build System Configuration for gcc based cross compilers and the like
# ###############################################################

# typical development systems have a host compiler version of gcc
# in the application execution path as "gcc".
# the appropriate cross-compiler gcc is often placed in a separate directory
# with a special prefix. This can be specified by PRJ_COMPILER_BINARY_PRE
# PRJ_COMPILER_BINARY_PRE="/opt/hardhat/devkit/arm/xscale_le/bin/xscale_le-"

# include directory for external libraries in Linux (or general: Makefile based builds)
# USE_LINUX_EXTERNAL_INCLUDE_PATH=""

# library directory for external libraries in Linux (or general: Makefile based builds
# USE_LINUX_EXTERNAL_LIBRARY_PATH=""

# additional libs when using Linux (or general: Makefile based builds
# USE_LINUX_EXTERNAL_LIBRARIES=""
